<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Mike Dane</title>
    <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Mike Dane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Nov 2017 01:21:24 -0500</lastBuildDate>
    
	<atom:link href="https://www.mikedane.com/programming-languages/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows Installation</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/windows-installation/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/windows-installation/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Mac Installation</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/mac-installation/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/mac-installation/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Hello World &amp; Setup</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/hello-world-setup/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/hello-world-setup/</guid>
      <description> Code Copycout &amp;lt;&amp;lt; &amp;#34;Hello&amp;#34; &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; &amp;#34;World&amp;#34;; cout &amp;lt;&amp;lt; &amp;#34;!&amp;#34; &amp;lt;&amp;lt; endl; </description>
    </item>
    
    <item>
      <title>Drawing A Pyramid</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/drawing-a-pyramid/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/drawing-a-pyramid/</guid>
      <description>As we begin our programming journey in C&amp;#43;&amp;#43;, we&#39;ll start by paying homage to a tradition widely shared among new programmers, which is learning how to print text out onto the screen. As we learn to talk to computers using a programming language like C&amp;#43;&amp;#43;, it will help to know how to get them to talk back to us in the form of output, so let&#39;s take a look!
We can achieve this by using a print statement.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/variables/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/variables/</guid>
      <description>The topic of this lesson, is in fact one of the most fundamental and important topics in all of computer programming, and once you master it, you&#39;ll be well on your way to becoming a C&amp;#43;&amp;#43; developer!
The topic I&#39;m talking about is variables! Variables are a C&amp;#43;&amp;#43; developer&#39;s bread and butter. They make it really easy to write complex programs with lots and lots of instructions, and keep everything organized and straight.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/data-types/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/data-types/</guid>
      <description>As we write more and more complex programs in C&amp;#43;&amp;#43;, we&#39;ll want to work with different types of data (data types). Maybe in one program we&#39;ll print out someone&#39;s favorite movie, in another we&#39;ll keep track of how much money a particular product costs, and maybe in another we&#39;ll ask someone if they&#39;re an organ donor. In everyday life we deal with all different types of data, so why should it be any different for programs?</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/strings/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/strings/</guid>
      <description>Let&#39;s talk about text, or as it&#39;s known to programmers, strings! In this lesson we&#39;ll take a look at one of C&amp;#43;&amp;#43;&#39;s most powerful data types and how you can use them to write awesome programs. As you continue on your journey to becoming a C&amp;#43;&amp;#43; developer, one really useful skill you&#39;ll want to pickup along the way is the ability to work with strings in a variety of ways.</description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/math/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/math/</guid>
      <description>Computers and numbers are like bread and butter. In fact the term computer actually used to refer to people who&#39;s job it was to do calculations and &#34;compute&#34; things all day. Needless to say we&#39;ve come a long way since then, and modern computers are capable of performing billions of calculations in the time it takes a normal human to even write a number down. Not to nerd out here too much, but when you get down to it, all computer instructions, all the code that we&#39;ve written in this course, and all the code that&#39;s currently running on your computer, is actually just a collection of complex patterns of 0s &amp;amp; 1s running through your processor.</description>
    </item>
    
    <item>
      <title>Getting Input From Users</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/getting-input-from-users/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/getting-input-from-users/</guid>
      <description>Throughout this course we&#39;ve taken a look at how we can make the computer give us information. We do this by using print statements. Print statements give us an idea of whats going on in the program at a given time, and are vital to writing good software. But what about the flip side, what happens when we want to give the computer some information? Almost all applications that you interact with on a daily basis will provide ways for you to give them information.</description>
    </item>
    
    <item>
      <title>Creating A Calculator</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/creating-a-calculator/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/creating-a-calculator/</guid>
      <description> Code Copyint num1, num2; cout &amp;lt;&amp;lt; &amp;#34;Enter first num: &amp;#34;; cin &amp;gt;&amp;gt; num1; cout &amp;lt;&amp;lt; &amp;#34;Enter second num: &amp;#34;; cin &amp;gt;&amp;gt; num2; cout &amp;lt;&amp;lt; &amp;#34;Answer: &amp;#34; &amp;lt;&amp;lt; num1 &amp;#43; num2 &amp;lt;&amp;lt; endl; </description>
    </item>
    
    <item>
      <title>Building A Mad Libs Game</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/building-a-mad-libs-game/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/building-a-mad-libs-game/</guid>
      <description> Code Copystring color, pluralNoun, celebrity; cout &amp;lt;&amp;lt; &amp;#34;Enter color: &amp;#34;; cin &amp;gt;&amp;gt; color; cout &amp;lt;&amp;lt; &amp;#34;Enter plural noun: &amp;#34;; cin &amp;gt;&amp;gt; pluralNoun; cout &amp;lt;&amp;lt; &amp;#34;Enter celebrity: &amp;#34;; cin &amp;gt;&amp;gt; celebrity; cout &amp;lt;&amp;lt; &amp;#34;Roses are &amp;#34; &amp;lt;&amp;lt; color &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; pluralNoun &amp;lt;&amp;lt; &amp;#34; are blue&amp;#34; &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; &amp;#34;I love &amp;#34; &amp;lt;&amp;lt; celebrity &amp;lt;&amp;lt; endl; </description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/arrays/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/arrays/</guid>
      <description>Up until this point in the course, we&#39;ve been working with different types of data, and generally we&#39;ve been using variables to store that data. Variables are great because we can take pieces of data that would otherwise be difficult to remember and keep track of and store them in a nice, named container. But variables as we&#39;ve seen them so far do have one short coming, and that&#39;s when it comes to storing large amounts of related data.</description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/methods/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/methods/</guid>
      <description>In this lesson I wanna talk to you about a really important concept in C&amp;#43;&amp;#43; which makes it really easy to keep our programs organized and re-usable. I&#39;m talking of course about Methods!
Maybe you&#39;ve heard the word Method floating around as you&#39;ve begun your programming journey, but today we&#39;re gonna break down exactly what they are and I&#39;ll show you how to use them in C&amp;#43;&amp;#43;.
Methods and Organization So far in this course we&#39;ve written a lot of code.</description>
    </item>
    
    <item>
      <title>Return</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/return/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/return/</guid>
      <description> Code Copyint addNumbers(int num1, int num2); int main() { int sum = addNumbers(4, 60); cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl; return 0; } int addNumbers(int num1, int num2){ return num1 &amp;#43; num2; } </description>
    </item>
    
    <item>
      <title>If Statements</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/if-statements/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/if-statements/</guid>
      <description>Up to this point in the course we&#39;ve written some pretty cool programs! But in this lesson I want to introduce you to a concept that will allow our programs to be even more powerful. If statements are a special structure in C&amp;#43;&amp;#43; where we can actually allow our programs to make decisions.
By using an if statement, I could execute certain code when certain conditions are true, and I could execute other code when other conditions are true.</description>
    </item>
    
    <item>
      <title>If Statements (Cont)</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/if-statements-cont/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/if-statements-cont/</guid>
      <description>Code Copybool isStudent = false; bool isSmart = false; if(isStudent &amp;amp;&amp;amp; isSmart){ cout &amp;lt;&amp;lt; &amp;#34;You are a student&amp;#34; &amp;lt;&amp;lt; endl; } else if(isStudent &amp;amp;&amp;amp; !isSmart){ cout &amp;lt;&amp;lt; &amp;#34;You are not a smart student&amp;#34; &amp;lt;&amp;lt; endl; } else { cout &amp;lt;&amp;lt; &amp;#34;You are not a student and not smart&amp;#34; &amp;lt;&amp;lt; endl; } // &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=, !=, == if(1 &amp;gt; 3){ cout &amp;lt;&amp;lt; &amp;#34;number comparison was true&amp;#34; &amp;lt;&amp;lt; endl; } if(&amp;#39;a&amp;#39; &amp;gt; &amp;#39;b&amp;#39;){ cout &amp;lt;&amp;lt; &amp;#34;character comparison was true&amp;#34; &amp;lt;&amp;lt; endl; } string myString = &amp;#34;cat&amp;#34;; if(myString.</description>
    </item>
    
    <item>
      <title>Calculator</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/calculator/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/calculator/</guid>
      <description> Code Copyint num1, num2; char op; cout &amp;lt;&amp;lt; &amp;#34;Enter num1: &amp;#34;; cin &amp;gt;&amp;gt; num1; cout &amp;lt;&amp;lt; &amp;#34;Enter Operator: &amp;#34;; cin &amp;gt;&amp;gt; op; cout &amp;lt;&amp;lt; &amp;#34;Enter num2: &amp;#34;; cin &amp;gt;&amp;gt; num2; if(op == &amp;#39;&amp;#43;&amp;#39;){ cout &amp;lt;&amp;lt; num1 &amp;#43; num2 &amp;lt;&amp;lt; endl; } else if(op == &amp;#39;-&amp;#39;){ cout &amp;lt;&amp;lt; num1 - num2 &amp;lt;&amp;lt; endl; } else if(op == &amp;#39;/&amp;#39;){ cout &amp;lt;&amp;lt; num1 / num2 &amp;lt;&amp;lt; endl; } else if(op == &amp;#39;*&amp;#39;){ cout &amp;lt;&amp;lt; num1 * num2 &amp;lt;&amp;lt; endl; } else { cout &amp;lt;&amp;lt; &amp;#34;Invalid Operator&amp;#34; &amp;lt;&amp;lt; endl; } </description>
    </item>
    
    <item>
      <title>Switch Statements</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/switch-statements/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/switch-statements/</guid>
      <description>Much like if statements, which give your program the ability to make decision, switch statements can be used to infuse a bit of intelligence into any program. In fact, a switch statement is essentially a specialized version of an if statement which would otherwise have an excessive amount of ELSE IF type statements. Let&#39;s take a look at why they&#39;re used. Sometimes, when infusing logic into your programs you&#39;ll run into a situation where given the value of a certain piece of data, you&#39;ll want to do something different.</description>
    </item>
    
    <item>
      <title>While Loops</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/while-loops/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/while-loops/</guid>
      <description>There&#39;s an on-going gag on the popular show &#34;The Simpsons&#34;, where Bart Simpson is forced to write lines on the chalkboard over and over agian to teach him a lesson. One of my favorites features Bart writing &#34;I will not show off&#34; on the blackboard hundreds of times.
I&#39;ve always liked this gag, and I&#39;m excited to say that I can use it to help explain a programming concept.
In the episode, when Bart wrote all those lines, he was literally writing the same thing 500 times for the whole afternoon.</description>
    </item>
    
    <item>
      <title>Building A Guessing Game</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/building-a-guessing-game/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/building-a-guessing-game/</guid>
      <description> Code Copyint secretNum = 7; int guess; int guessCount = 0; int guessLimit = 3; bool outOfGuesses = false; while(guess != secretNum &amp;amp;&amp;amp; !outOfGuesses){ if(guessCount &amp;lt; guessLimit){ cout &amp;lt;&amp;lt; &amp;#34;Enter a guess: &amp;#34;; cin &amp;lt;&amp;lt; guess; guessCount&amp;#43;&amp;#43;; } else { outOfGuesses = true; } } if(outOfGuesses){ cout &amp;lt;&amp;lt; &amp;#34;You Lose!&amp;#34; &amp;lt;&amp;lt; endl; } else { cout &amp;lt;&amp;lt; &amp;#34;You Win!&amp;#34; &amp;lt;&amp;lt; endl; } </description>
    </item>
    
    <item>
      <title>For Loops</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/for-loops/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/for-loops/</guid>
      <description>The next type of loops were going to discuss are called for loops. For loops are actually just slightly modified versions of while loops which we looked at in a previous lesson. But for loops can make your life as a programmer a lot easier because they simplify a commonly used while loop structure.  The concept is the same a while loop, you’re checking some boolean expression on each iteration of the loop and executing a block of code if it’s true.</description>
    </item>
    
    <item>
      <title>Building An Exponent Function</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/building-an-exponent-function/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:26 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/building-an-exponent-function/</guid>
      <description> Code Copyint power(int baseNum, powNum){ int result = 1; for(int i = 0; i &amp;lt; powNum; i&amp;#43;&amp;#43;){ result = result * baseNum; } return result; } </description>
    </item>
    
    <item>
      <title>2d Arrays &amp; Nested Loops</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/2d-arrays-nested-loops/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:27 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/2d-arrays-nested-loops/</guid>
      <description> Code Copy// int numberGrid[2][3]; int numberGrid[2][3] = { {1, 2, 3}, {4, 5, 6} }; numberGrid[0][1] = 99; cout &amp;lt;&amp;lt; numberGrid[0][0] &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; numberGrid[0][1] &amp;lt;&amp;lt; endl; for(int i = 0; i &amp;lt; 2; i&amp;#43;&amp;#43;){ for(int j = 0; j &amp;lt; 3; j&amp;#43;&amp;#43;){ cout &amp;lt;&amp;lt; numberGrid[i][j] &amp;lt;&amp;lt; endl; } } </description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/comments/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:27 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/comments/</guid>
      <description>As you continue to sharpen your C&amp;#43;&amp;#43; skills and get more and more comfortable writing programs, you&#39;ll eventually become really good at reading code. Just by looking at a line or two you&#39;ll be able to tell what the program is doing, and what&#39;s going to happen. But, in a lot of cases, merely relying on the code to properly explain or document itself can be ineffective, and often times in the course of writing a program you&#39;ll want to mark things down or explain why you&#39;re doing things a certain way.</description>
    </item>
    
    <item>
      <title>Memory &amp; Pointers</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/memory-pointers/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:27 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/memory-pointers/</guid>
      <description> Code Copyint num = 10; cout &amp;lt;&amp;lt; &amp;amp;num &amp;lt;&amp;lt; endl; int *pNum = &amp;amp;num; cout &amp;lt;&amp;lt; pNum &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; *pNum &amp;lt;&amp;lt; endl; </description>
    </item>
    
    <item>
      <title>Classes &amp; Objects</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/classes-objects/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:27 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/classes-objects/</guid>
      <description>One of the best things about C&amp;#43;&amp;#43; is it&#39;s ability to allow us to work with and keep track of a bunch of data. In fact data is the driving force behind most programs that you&#39;ll write. Programmers are constantly parsing strings, adding and subtracting numbers, counting things, and passing different pieces of data around. In all major applications, being able to work with data in an organized and structured way is extremely important.</description>
    </item>
    
    <item>
      <title>Constructor Function</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/constructor-function/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:27 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/constructor-function/</guid>
      <description> Code Copyclass Book{ public: string title; string author; Book(string title, string author){ this-&amp;gt;title = title; this-&amp;gt;author = author; } }; int main(){ Book book1(&amp;#34;Harry Potter&amp;#34;, &amp;#34;JK Rowling&amp;#34;); cout &amp;lt;&amp;lt; book1.title &amp;lt;&amp;lt; endl; Book book2(&amp;#34;Lord of the Rings&amp;#34;, &amp;#34;JRR Tolkien&amp;#34;); cout &amp;lt;&amp;lt; book2.title &amp;lt;&amp;lt; endl; return 0; } </description>
    </item>
    
    <item>
      <title>Object Functions</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/object-functions/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:27 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/object-functions/</guid>
      <description> Code Copyclass Book{ public: string title; string author; void readBook(){ cout &amp;lt;&amp;lt; &amp;#34;Reading &amp;#34; &amp;#43; this-&amp;gt;title &amp;#43; &amp;#34; by &amp;#34; &amp;#43; this-&amp;gt;author &amp;lt;&amp;lt; endl; } }; </description>
    </item>
    
    <item>
      <title>Getters And Setters</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/getters-and-setters/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:27 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/getters-and-setters/</guid>
      <description> Code Copyclass Movie{ private: string title; public: string rating; Book(string title, string rating){ this-&amp;gt;title = title; this-&amp;gt;setRating(rating); } string getRating(){ return this-&amp;gt;rating; } void setRating(string rating){ if(rating == &amp;#34;G&amp;#34; || rating == &amp;#34;PG&amp;#34; || rating == &amp;#34;PG-13&amp;#34; || rating == &amp;#34;R&amp;#34; || rating == &amp;#34;NR&amp;#34; || ){ this-&amp;gt;rating = rating; } else { this-&amp;gt;rating = &amp;#34;NR&amp;#34;; } } }; </description>
    </item>
    
    <item>
      <title>Inheritance</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/inheritance/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:27 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/inheritance/</guid>
      <description>Code Copyclass Chef{ public: void makeChicken(){ cout &amp;lt;&amp;lt; &amp;#34;The chef makes chicken&amp;#34; &amp;lt;&amp;lt; endl; } void makeSalad(){ cout &amp;lt;&amp;lt; &amp;#34;The chef makes salad&amp;#34; &amp;lt;&amp;lt; endl; } void makeSpecialDish(){ cout &amp;lt;&amp;lt; &amp;#34;The chef makes a special dish&amp;#34; &amp;lt;&amp;lt; endl; } }; class ItalianChef : public Chef{ public: void makePasta(){ cout &amp;lt;&amp;lt; &amp;#34;The chef makes pasta&amp;#34; &amp;lt;&amp;lt; endl; } // override void makeSpecialDish(){ cout &amp;lt;&amp;lt; &amp;#34;The chef makes chicken parm&amp;#34; &amp;lt;&amp;lt; endl; } }; int main(){ Chef myChef(); myChef.</description>
    </item>
    
    <item>
      <title>In One Video</title>
      <link>https://www.mikedane.com/programming-languages/c&#43;&#43;/in-one-video/</link>
      <pubDate>Tue, 07 Nov 2017 01:21:25 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c&#43;&#43;/in-one-video/</guid>
      <description>C++ Overview C++ is a general purpose, staticly typed, object oriented programming language that began in 1979 by Danish Computer Scientist Bjarne Stroustrup. For several years the language evolved until it&amp;rsquo;s official release in 1985.
C++ is essentially an extension of the C programming language. It actually began as a fork of an early pre-standardized C. And while C is not a strict subset of C++ the two languages are largly compatiable and In many instances C code can be used with little or no modification as C++ code.</description>
    </item>
    
  </channel>
</rss>