<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Mike Dane</title>
    <link>https://www.mikedane.com/programming-languages/c/</link>
    <description>Recent content in C on Mike Dane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Nov 2017 00:17:31 -0400</lastBuildDate>
    
	<atom:link href="https://www.mikedane.com/programming-languages/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows Installation</title>
      <link>https://www.mikedane.com/programming-languages/c/windows-installation/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:32 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/windows-installation/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Mac Installation</title>
      <link>https://www.mikedane.com/programming-languages/c/mac-installation/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:32 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/mac-installation/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.mikedane.com/programming-languages/c/hello-world/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:32 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/hello-world/</guid>
      <description> Code Copyprintf(&amp;#34;Hello\n&amp;#34;); printf(&amp;#34;World&amp;#34;); printf(&amp;#34;!\n&amp;#34;); </description>
    </item>
    
    <item>
      <title>Drawing A Pyramid</title>
      <link>https://www.mikedane.com/programming-languages/c/drawing-a-pyramid/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:33 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/drawing-a-pyramid/</guid>
      <description>As we begin our programming journey in C, we&#39;ll start by paying homage to a tradition widely shared among new programmers, which is learning how to print text out onto the screen. As we learn to talk to computers using a programming language like C, it will help to know how to get them to talk back to us in the form of output, so let&#39;s take a look!
We can achieve this by using a print statement.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.mikedane.com/programming-languages/c/variables/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:34 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/variables/</guid>
      <description>The topic of this lesson, is in fact one of the most fundamental and important topics in all of computer programming, and once you master it, you&#39;ll be well on your way to becoming a C developer!
The topic I&#39;m talking about is variables! Variables are a C developer&#39;s bread and butter. They make it really easy to write complex programs with lots and lots of instructions, and keep everything organized and straight.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://www.mikedane.com/programming-languages/c/data-types/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:35 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/data-types/</guid>
      <description>As we write more and more complex programs in C, we&#39;ll want to work with different types of data (data types). Maybe in one program we&#39;ll print out someone&#39;s favorite movie, in another we&#39;ll keep track of how much money a particular product costs, and maybe in another we&#39;ll ask someone if they&#39;re an organ donor. In everyday life we deal with all different types of data, so why should it be any different for programs?</description>
    </item>
    
    <item>
      <title>Printf</title>
      <link>https://www.mikedane.com/programming-languages/c/printf/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:35 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/printf/</guid>
      <description> %c character %d integer number (base 10) %e exponential floating-point number %f floating-point number %i integer (base 10) %o octal number (base 8) %s a string of characters %u unsigned decimal (integer) number %x number in hexadecimal (base 16) %% print a percent sign \% print a percent sign  </description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://www.mikedane.com/programming-languages/c/math/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:36 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/math/</guid>
      <description>Computers and numbers are like bread and butter. In fact the term computer actually used to refer to people who&#39;s job it was to do calculations and &#34;compute&#34; things all day. Needless to say we&#39;ve come a long way since then, and modern computers are capable of performing billions of calculations in the time it takes a normal human to even write a number down. Not to nerd out here too much, but when you get down to it, all computer instructions, all the code that we&#39;ve written in this course, and all the code that&#39;s currently running on your computer, is actually just a collection of complex patterns of 0s &amp;amp; 1s running through your processor.</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://www.mikedane.com/programming-languages/c/comments/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:37 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/comments/</guid>
      <description>As you continue to sharpen your C skills and get more and more comfortable writing programs, you&#39;ll eventually become really good at reading code. Just by looking at a line or two you&#39;ll be able to tell what the program is doing, and what&#39;s going to happen. But, in a lot of cases, merely relying on the code to properly explain or document itself can be ineffective, and often times in the course of writing a program you&#39;ll want to mark things down or explain why you&#39;re doing things a certain way.</description>
    </item>
    
    <item>
      <title>Constants</title>
      <link>https://www.mikedane.com/programming-languages/c/constants/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:39 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/constants/</guid>
      <description> Code Copyconst int FAV_NUM = 4; </description>
    </item>
    
    <item>
      <title>Getting Input From Users</title>
      <link>https://www.mikedane.com/programming-languages/c/getting-input-from-users/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:39 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/getting-input-from-users/</guid>
      <description>Throughout this course we&#39;ve taken a look at how we can make the computer give us information. We do this by using print statements. Print statements give us an idea of whats going on in the program at a given time, and are vital to writing good software. But what about the flip side, what happens when we want to give the computer some information? Almost all applications that you interact with on a daily basis will provide ways for you to give them information.</description>
    </item>
    
    <item>
      <title>Creating A Calculator</title>
      <link>https://www.mikedane.com/programming-languages/c/creating-a-calculator/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:41 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/creating-a-calculator/</guid>
      <description> Code Copydouble num1, num2; printf(&amp;#34;num1: &amp;#34;); scanf(&amp;#34;%lf&amp;#34;, &amp;amp;num1); printf(&amp;#34;num2: &amp;#34;); scanf(&amp;#34;%lf&amp;#34;, &amp;amp;num2); printf(&amp;#34;%f&amp;#34;, num1 &amp;#43; num2); </description>
    </item>
    
    <item>
      <title>Building A Mad Libs Game</title>
      <link>https://www.mikedane.com/programming-languages/c/building-a-mad-libs-game/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:41 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/building-a-mad-libs-game/</guid>
      <description> Code Copy// using fgets() instead of scanf() char color[50]; char pluralNoun[50]; char celebrity[50]; printf(&amp;#34;Enter color: &amp;#34;); fgets(color, 50, stdin); printf(&amp;#34;Enter plural noun: &amp;#34;); fgets(pluralNoun, 50, stdin); printf(&amp;#34;Enter celebrity: &amp;#34;); fgets(celebrity, 50, stdin); printf(&amp;#34;Roses are %s \n&amp;#34;, color); printf(&amp;#34;%s are blue \n&amp;#34;, pluralNoun); printf(&amp;#34;I love %s \n&amp;#34;, celebrity); </description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.mikedane.com/programming-languages/c/arrays/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:43 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/arrays/</guid>
      <description>Up until this point in the course, we&#39;ve been working with different types of data, and generally we&#39;ve been using variables to store that data. Variables are great because we can take pieces of data that would otherwise be difficult to remember and keep track of and store them in a nice, named container. But variables as we&#39;ve seen them so far do have one short coming, and that&#39;s when it comes to storing large amounts of related data.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.mikedane.com/programming-languages/c/functions/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/functions/</guid>
      <description> Code Copyint addNumbers(int num1, int num2); int main(){ int sum = addNumbers(4, 60); printf(&amp;#34;%d \n&amp;#34;, sum); return 0; } int addNumbers(int num1, int num2){ return num1 &amp;#43; num2; } </description>
    </item>
    
    <item>
      <title>Return Statements</title>
      <link>https://www.mikedane.com/programming-languages/c/return-statements/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/return-statements/</guid>
      <description> Code Copyint addNumbers(int num1, int num2); int main(){ int sum = addNumbers(4, 60); printf(&amp;#34;%d \n&amp;#34;, sum); return 0; } int addNumbers(int num1, int num2){ return num1 &amp;#43; num2; } </description>
    </item>
    
    <item>
      <title>If Statements</title>
      <link>https://www.mikedane.com/programming-languages/c/if-statements/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/if-statements/</guid>
      <description>Up to this point in the course we&#39;ve written some pretty cool programs! But in this lesson I want to introduce you to a concept that will allow our programs to be even more powerful. If statements are a special structure in C where we can actually allow our programs to make decisions.
By using an if statement, I could execute certain code when certain conditions are true, and I could execute other code when other conditions are true.</description>
    </item>
    
    <item>
      <title>Building A Better Calculator</title>
      <link>https://www.mikedane.com/programming-languages/c/building-a-better-calculator/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:45 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/building-a-better-calculator/</guid>
      <description> Code Copyint num1, num2; char op; printf((&amp;#34;Enter num1: &amp;#34;); scanf(&amp;#34;%d&amp;#34;, &amp;amp;num1); printf((&amp;#34;Enter Operator: &amp;#34;); scanf(&amp;#34;%c&amp;#34;, &amp;amp;op); printf((&amp;#34;Enter num2: &amp;#34;); scanf(&amp;#34;%d&amp;#34;, &amp;amp;num2); if(op == &amp;#39;&amp;#43;&amp;#39;){ printf(&amp;#34;%d&amp;#34;, num1 &amp;#43; num2); } else if(op == &amp;#39;-&amp;#39;){ printf(&amp;#34;%d&amp;#34;, num1 - num2); } else if(op == &amp;#39;/&amp;#39;){ printf(&amp;#34;%d&amp;#34;, num1 / num2); } else if(op == &amp;#39;*&amp;#39;){ printf(&amp;#34;%d&amp;#34;, num1 * num2); } else { printf(&amp;#34;Invalid Operator&amp;#34;); } </description>
    </item>
    
    <item>
      <title>Switch Statements</title>
      <link>https://www.mikedane.com/programming-languages/c/switch-statements/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:46 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/switch-statements/</guid>
      <description>Much like if statements, which give your program the ability to make decision, switch statements can be used to infuse a bit of intelligence into any program. In fact, a switch statement is essentially a specialized version of an if statement which would otherwise have an excessive amount of ELSE IF type statements. Let&#39;s take a look at why they&#39;re used. Sometimes, when infusing logic into your programs you&#39;ll run into a situation where given the value of a certain piece of data, you&#39;ll want to do something different.</description>
    </item>
    
    <item>
      <title>Structs</title>
      <link>https://www.mikedane.com/programming-languages/c/structs/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:46 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/structs/</guid>
      <description> Code Copystruct Book{ char title[100]; char author[100]; } int main(){ struct Book book1; book1.numPages = 600; strcpy( book1.title, &amp;#34;Harry Potter&amp;#34; ); strcpy( book1.author, &amp;#34;JK Rowling&amp;#34;); printf(&amp;#34;%s \n&amp;#34;, book1.title); return 0; } </description>
    </item>
    
    <item>
      <title>While Loops</title>
      <link>https://www.mikedane.com/programming-languages/c/while-loops/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:47 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/while-loops/</guid>
      <description>There&#39;s an on-going gag on the popular show &#34;The Simpsons&#34;, where Bart Simpson is forced to write lines on the chalkboard over and over agian to teach him a lesson. One of my favorites features Bart writing &#34;I will not show off&#34; on the blackboard hundreds of times.
I&#39;ve always liked this gag, and I&#39;m excited to say that I can use it to help explain a programming concept.
In the episode, when Bart wrote all those lines, he was literally writing the same thing 500 times for the whole afternoon.</description>
    </item>
    
    <item>
      <title>Building A Guessing Game</title>
      <link>https://www.mikedane.com/programming-languages/c/building-a-guessing-game/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:48 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/building-a-guessing-game/</guid>
      <description> Code Copyint secretNum = 7; int guess; int guessCount = 0; int guessLimit = 3; int outOfGuesses = 0; while(guess != secretNum &amp;amp;&amp;amp; outOfGuesses == 0){ if(guessCount &amp;lt; guessLimit){ printf(&amp;#34;Enter a guess: &amp;#34;; scanf(&amp;#34;d&amp;#34;, &amp;amp;guess); guessCount&amp;#43;&amp;#43;; } else { outOfGuesses = 1; } } if(outOfGuesses != 0){ printf(&amp;#34;You Lose!&amp;#34;); } else { printf(&amp;#34;You Win!&amp;#34;); } </description>
    </item>
    
    <item>
      <title>For Loops</title>
      <link>https://www.mikedane.com/programming-languages/c/for-loops/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:49 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/for-loops/</guid>
      <description>The next type of loops were going to discuss are called for loops. For loops are actually just slightly modified versions of while loops which we looked at in a previous lesson. But for loops can make your life as a programmer a lot easier because they simplify a commonly used while loop structure.  The concept is the same a while loop, you’re checking some boolean expression on each iteration of the loop and executing a block of code if it’s true.</description>
    </item>
    
    <item>
      <title>2d Arrays &amp; Nested Loops</title>
      <link>https://www.mikedane.com/programming-languages/c/2d-arrays-nested-loops/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:49 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/2d-arrays-nested-loops/</guid>
      <description> Code Copy// int numberGrid[2][3]; int numberGrid[2][3] = { {1, 2, 3}, {4, 5, 6} }; numberGrid[0][1] = 99; cout &amp;lt;&amp;lt; numberGrid[0][0] &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; numberGrid[0][1] &amp;lt;&amp;lt; endl; for(int i = 0; i &amp;lt; 2; i&amp;#43;&amp;#43;){ for(int j = 0; j &amp;lt; 3; j&amp;#43;&amp;#43;){ printf(&amp;#34;%d&amp;#34;, numberGrid[i][j]); } } </description>
    </item>
    
    <item>
      <title>Accessing Memory Address</title>
      <link>https://www.mikedane.com/programming-languages/c/accessing-memory-address/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:51 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/accessing-memory-address/</guid>
      <description> Code Copyint num = 10; printf(&amp;#34;%p \n&amp;#34;, &amp;amp;num); </description>
    </item>
    
    <item>
      <title>Pointers</title>
      <link>https://www.mikedane.com/programming-languages/c/pointers/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:52 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/pointers/</guid>
      <description> Code Copyint num = 10; printf(&amp;#34;%p \n&amp;#34;, &amp;amp;num); int *pNum = &amp;amp;num; printf(&amp;#34;%p \n&amp;#34;, pNum); </description>
    </item>
    
    <item>
      <title>Dereferencing Pointers</title>
      <link>https://www.mikedane.com/programming-languages/c/dereferencing-pointers/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:52 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/dereferencing-pointers/</guid>
      <description> Code Copyint num = 10; printf(&amp;#34;%p \n&amp;#34;, &amp;amp;num); int *pNum = &amp;amp;num; printf(&amp;#34;%p \n&amp;#34;, pNum); printf(&amp;#34;%d \n&amp;#34;, *pNum); </description>
    </item>
    
    <item>
      <title>Writing To External Files</title>
      <link>https://www.mikedane.com/programming-languages/c/writing-to-external-files/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:52 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/writing-to-external-files/</guid>
      <description> Code CopyFILE * fpointer = fopen(&amp;#34;employees.txt&amp;#34;, &amp;#34;w&amp;#34;); // also try &amp;#34;a&amp;#34; for append fprint(fpointer, &amp;#34;employee&amp;#34;); fclose(fpointer); </description>
    </item>
    
    <item>
      <title>Reading From External Files</title>
      <link>https://www.mikedane.com/programming-languages/c/reading-from-external-files/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:54 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/reading-from-external-files/</guid>
      <description> Code Copychar line[255]; FILE * fpointer = fopen(&amp;#34;employees.txt&amp;#34;, &amp;#34;r&amp;#34;); fgets(line, 255, fpointer); printf(&amp;#34;%s&amp;#34;, line); fclose(fpointer); </description>
    </item>
    
    <item>
      <title>In One Video</title>
      <link>https://www.mikedane.com/programming-languages/c/in-one-video/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:37 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/in-one-video/</guid>
      <description>C Overview C is a general purpose, staticly typed, imperative programming language that was founded in 1972 by Dennis Ritchie and Ken Thompson at Bell Labrotories.
C is a low level language meaning it provides constructs which map efficiently to typical machine instructions. Baiscally it&amp;rsquo;s a more user friendly way to write low level programs. Instead of pulling your hair out writing low level code in an assembly language, you can abstract a lot of the fuss and write equivalent programs in c</description>
    </item>
    
  </channel>
</rss>