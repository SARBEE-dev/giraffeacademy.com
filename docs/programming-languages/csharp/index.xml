<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Mike Dane</title>
    <link>https://www.mikedane.com/programming-languages/csharp/</link>
    <description>Recent content in C# on Mike Dane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Nov 2017 18:34:44 -0500</lastBuildDate>
    
	<atom:link href="https://www.mikedane.com/programming-languages/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation</title>
      <link>https://www.mikedane.com/programming-languages/csharp/installation/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/installation/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Drawing A Pyramid</title>
      <link>https://www.mikedane.com/programming-languages/csharp/drawing-a-pyramid/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/drawing-a-pyramid/</guid>
      <description>As we begin our programming journey in C#, we&#39;ll start by paying homage to a tradition widely shared among new programmers, which is learning how to print text out onto the screen. As we learn to talk to computers using a programming language like C#, it will help to know how to get them to talk back to us in the form of output, so let&#39;s take a look!
We can achieve this by using a print statement.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.mikedane.com/programming-languages/csharp/variables/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/variables/</guid>
      <description>The topic of this lesson, is in fact one of the most fundamental and important topics in all of computer programming, and once you master it, you&#39;ll be well on your way to becoming a C# developer!
The topic I&#39;m talking about is variables! Variables are a C# developer&#39;s bread and butter. They make it really easy to write complex programs with lots and lots of instructions, and keep everything organized and straight.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://www.mikedane.com/programming-languages/csharp/data-types/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/data-types/</guid>
      <description>As we write more and more complex programs in C#, we&#39;ll want to work with different types of data (data types). Maybe in one program we&#39;ll print out someone&#39;s favorite movie, in another we&#39;ll keep track of how much money a particular product costs, and maybe in another we&#39;ll ask someone if they&#39;re an organ donor. In everyday life we deal with all different types of data, so why should it be any different for programs?</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.mikedane.com/programming-languages/csharp/strings/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/strings/</guid>
      <description>Let&#39;s talk about text, or as it&#39;s known to programmers, strings! In this lesson we&#39;ll take a look at one of C#&#39;s most powerful data types and how you can use them to write awesome programs. As you continue on your journey to becoming a C# developer, one really useful skill you&#39;ll want to pickup along the way is the ability to work with strings in a variety of ways.</description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://www.mikedane.com/programming-languages/csharp/math/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/math/</guid>
      <description>Computers and numbers are like bread and butter. In fact the term computer actually used to refer to people who&#39;s job it was to do calculations and &#34;compute&#34; things all day. Needless to say we&#39;ve come a long way since then, and modern computers are capable of performing billions of calculations in the time it takes a normal human to even write a number down. Not to nerd out here too much, but when you get down to it, all computer instructions, all the code that we&#39;ve written in this course, and all the code that&#39;s currently running on your computer, is actually just a collection of complex patterns of 0s &amp;amp; 1s running through your processor.</description>
    </item>
    
    <item>
      <title>Getting Input From Users</title>
      <link>https://www.mikedane.com/programming-languages/csharp/getting-input-from-users/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/getting-input-from-users/</guid>
      <description>Throughout this course we&#39;ve taken a look at how we can make the computer give us information. We do this by using print statements. Print statements give us an idea of whats going on in the program at a given time, and are vital to writing good software. But what about the flip side, what happens when we want to give the computer some information? Almost all applications that you interact with on a daily basis will provide ways for you to give them information.</description>
    </item>
    
    <item>
      <title>Creating A Calculator</title>
      <link>https://www.mikedane.com/programming-languages/csharp/creating-a-calculator/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/creating-a-calculator/</guid>
      <description> Code CopyConsole.Write(&amp;#34;Enter num1: &amp;#34;); double num1 = Convert.ToDouble(Console.ReadLine()); Console.Write(&amp;#34;Enter num2: &amp;#34;); double num2 = Convert.ToDouble(Console.ReadLine()); Console.WriteLine(num1 &amp;#43; num2); </description>
    </item>
    
    <item>
      <title>Building A Mad Libs Game</title>
      <link>https://www.mikedane.com/programming-languages/csharp/building-a-mad-libs-game/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/building-a-mad-libs-game/</guid>
      <description> Code CopyConsole.Write(&amp;#34;Enter color: &amp;#34;); string color = Console.ReadLine(); Console.Write(&amp;#34;Enter plural noun: &amp;#34;); string pluralNoun = Console.ReadLine(); Console.Write(&amp;#34;Enter celebrity: &amp;#34;); string celebrity = Console.ReadLine(); Console.WriteLine($&amp;#34;Roses are {color}&amp;#34;); Console.WriteLine($&amp;#34;{pluralNoun} are blue&amp;#34;); Console.WriteLine($&amp;#34;I love {celebrity}&amp;#34;); </description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.mikedane.com/programming-languages/csharp/arrays/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/arrays/</guid>
      <description>Up until this point in the course, we&#39;ve been working with different types of data, and generally we&#39;ve been using variables to store that data. Variables are great because we can take pieces of data that would otherwise be difficult to remember and keep track of and store them in a nice, named container. But variables as we&#39;ve seen them so far do have one short coming, and that&#39;s when it comes to storing large amounts of related data.</description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>https://www.mikedane.com/programming-languages/csharp/methods/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/methods/</guid>
      <description>In this lesson I wanna talk to you about a really important concept in C# which makes it really easy to keep our programs organized and re-usable. I&#39;m talking of course about Methods!
Maybe you&#39;ve heard the word Method floating around as you&#39;ve begun your programming journey, but today we&#39;re gonna break down exactly what they are and I&#39;ll show you how to use them in C#.
Methods and Organization So far in this course we&#39;ve written a lot of code.</description>
    </item>
    
    <item>
      <title>Return</title>
      <link>https://www.mikedane.com/programming-languages/csharp/return/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/return/</guid>
      <description> Code Copypublic static void Main(string [] args){ int sum = AddNumbers(4, 60); Console.WriteLine(sum); } public static int AddNumbers(int num1, int num2){ return num1 &amp;#43; num2; } </description>
    </item>
    
    <item>
      <title>If Statements</title>
      <link>https://www.mikedane.com/programming-languages/csharp/if-statements/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/if-statements/</guid>
      <description>Up to this point in the course we&#39;ve written some pretty cool programs! But in this lesson I want to introduce you to a concept that will allow our programs to be even more powerful. If statements are a special structure in C# where we can actually allow our programs to make decisions.
By using an if statement, I could execute certain code when certain conditions are true, and I could execute other code when other conditions are true.</description>
    </item>
    
    <item>
      <title>If Statements Cont</title>
      <link>https://www.mikedane.com/programming-languages/csharp/if-statements-cont/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/if-statements-cont/</guid>
      <description> Code Copybool isStudent = false; bool isSmart = false; if (isStudent &amp;amp;&amp;amp; isSmart) { Console.WriteLine(&amp;#34;You are a student&amp;#34;); } else if (isStudent &amp;amp;&amp;amp; !isSmart) { Console.WriteLine(&amp;#34;You are not a smart student&amp;#34;); } else { Console.WriteLine(&amp;#34;You are not a student and not smart&amp;#34;); } // &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=, !=, == if (1 &amp;lt; 3) { Console.WriteLine(&amp;#34;number comparison was true&amp;#34;); } </description>
    </item>
    
    <item>
      <title>4 Function Calculator</title>
      <link>https://www.mikedane.com/programming-languages/csharp/calculator/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/calculator/</guid>
      <description> Code CopyConsole.Write(&amp;#34;Enter num1: &amp;#34;); double num1 = Convert.ToDouble(Console.ReadLine()); Console.Write(&amp;#34;Enter operator: &amp;#34;); string op = Console.ReadLine(); Console.Write(&amp;#34;Enter num2: &amp;#34;); double num2 = Convert.ToDouble(Console.ReadLine()); if (op == &amp;#34;&amp;#43;&amp;#34;){ Console.WriteLine(num1 &amp;#43; num2); } else if (op == &amp;#34;-&amp;#34;){ Console.WriteLine(num1 - num2); } else if (op == &amp;#34;/&amp;#34;){ Console.WriteLine(num1 / num2); } else if (op == &amp;#34;*&amp;#34;){ Console.WriteLine(num1 * num2); } else { Console.WriteLine(&amp;#34;Invalid Operator&amp;#34;); } </description>
    </item>
    
    <item>
      <title>Switch Statements</title>
      <link>https://www.mikedane.com/programming-languages/csharp/switch-statements/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/switch-statements/</guid>
      <description>Much like if statements, which give your program the ability to make decision, switch statements can be used to infuse a bit of intelligence into any program. In fact, a switch statement is essentially a specialized version of an if statement which would otherwise have an excessive amount of ELSE IF type statements. Let&#39;s take a look at why they&#39;re used. Sometimes, when infusing logic into your programs you&#39;ll run into a situation where given the value of a certain piece of data, you&#39;ll want to do something different.</description>
    </item>
    
    <item>
      <title>While Loops</title>
      <link>https://www.mikedane.com/programming-languages/csharp/while-loops/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/while-loops/</guid>
      <description>There&#39;s an on-going gag on the popular show &#34;The Simpsons&#34;, where Bart Simpson is forced to write lines on the chalkboard over and over agian to teach him a lesson. One of my favorites features Bart writing &#34;I will not show off&#34; on the blackboard hundreds of times.
I&#39;ve always liked this gag, and I&#39;m excited to say that I can use it to help explain a programming concept.
In the episode, when Bart wrote all those lines, he was literally writing the same thing 500 times for the whole afternoon.</description>
    </item>
    
    <item>
      <title>Building A Guessing Game</title>
      <link>https://www.mikedane.com/programming-languages/csharp/building-a-guessing-game/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/building-a-guessing-game/</guid>
      <description> Code Copystring secretWord = &amp;#34;giraffe&amp;#34;; string guess = &amp;#34;&amp;#34;; int guessCount = 0; int guessLimit = 3; bool outOfGuesses = false; while(!guess == secretWord &amp;amp;&amp;amp; !outOfGuesses){ if(guessCount &amp;lt; guessLimit){ Console.Write(&amp;#34;Enter a guess: &amp;#34;); guess = Console.ReadLine(); guessCount&amp;#43;&amp;#43;; } else { outOfGuesses = true; } } if(outOfGuesses){ Console.WriteLine(&amp;#34;You Lose!&amp;#34;); } else { Console.WriteLine(&amp;#34;You Win!&amp;#34;); } </description>
    </item>
    
    <item>
      <title>For Loops</title>
      <link>https://www.mikedane.com/programming-languages/csharp/for-loops/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/for-loops/</guid>
      <description>The next type of loops were going to discuss are called for loops. For loops are actually just slightly modified versions of while loops which we looked at in a previous lesson. But for loops can make your life as a programmer a lot easier because they simplify a commonly used while loop structure.  The concept is the same a while loop, you’re checking some boolean expression on each iteration of the loop and executing a block of code if it’s true.</description>
    </item>
    
    <item>
      <title>Building An Exponent Method</title>
      <link>https://www.mikedane.com/programming-languages/csharp/building-an-exponent-function/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/building-an-exponent-function/</guid>
      <description> Code Copystatic int GetPow(int baseNum, int powNum) { int result = 1; for(int i = 0; i &amp;lt; powNum; i&amp;#43;&amp;#43;){ result = result * baseNum; } return result; } </description>
    </item>
    
    <item>
      <title>2d Arrays</title>
      <link>https://www.mikedane.com/programming-languages/csharp/2d-arrays/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/2d-arrays/</guid>
      <description> Code Copy// int [][] numberGrid = new int[2][3]; int[][] numberGrid = { new int[]{ 1, 2 }, new int[]{ 3, 4 } }; numberGrid[0][1] = 99; Console.WriteLine(numberGrid[0][0]); Console.WriteLine(numberGrid[0][1]); for(int i = 0; i &amp;lt; numberGrid.Length; i&amp;#43;&amp;#43;){ for(int j = 0; j &amp;lt; numberGrid[i].Length; j&amp;#43;&amp;#43;){ Console.WriteLine(numberGrid[i][j]); } } </description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://www.mikedane.com/programming-languages/csharp/comments/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:47 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/comments/</guid>
      <description>As you continue to sharpen your C# skills and get more and more comfortable writing programs, you&#39;ll eventually become really good at reading code. Just by looking at a line or two you&#39;ll be able to tell what the program is doing, and what&#39;s going to happen. But, in a lot of cases, merely relying on the code to properly explain or document itself can be ineffective, and often times in the course of writing a program you&#39;ll want to mark things down or explain why you&#39;re doing things a certain way.</description>
    </item>
    
    <item>
      <title>Try &amp; Catch</title>
      <link>https://www.mikedane.com/programming-languages/csharp/try-catch/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:47 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/try-catch/</guid>
      <description> Code Copy// this code takes a number from the user and // divides 10 by it. Enter &amp;#39;0&amp;#39; to trigger the exception try{ int division = 10 / Convert.ToInt32(Console.ReadLine()); }catch(DivideByZeroException e){ Console.WriteLine(e); }catch(Exception e){ Console.WriteLine(e); // Not best practice to use general Exception } // throws new exception throw new DivideByZeroException(&amp;#34;can&amp;#39;t divide numbers&amp;#34;); </description>
    </item>
    
    <item>
      <title>Classes &amp; Objects</title>
      <link>https://www.mikedane.com/programming-languages/csharp/classes-objects/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:47 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/classes-objects/</guid>
      <description>One of the best things about C# is it&#39;s ability to allow us to work with and keep track of a bunch of data. In fact data is the driving force behind most programs that you&#39;ll write. Programmers are constantly parsing strings, adding and subtracting numbers, counting things, and passing different pieces of data around. In all major applications, being able to work with data in an organized and structured way is extremely important.</description>
    </item>
    
    <item>
      <title>Constructor Function</title>
      <link>https://www.mikedane.com/programming-languages/csharp/constructor-function/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:47 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/constructor-function/</guid>
      <description> Code Copypublic class Book{ public String title; public String author; public Book(String title, String author){ this.title = title; this.author = author; } } public class App { public static void Main(string[] args) { Book book1 = new Book(&amp;#34;Harry Potter&amp;#34;, &amp;#34;JK Rowling&amp;#34;); Console.WriteLine(book1.title); Book book2 = new Book(&amp;#34;Lord of the Rings&amp;#34;, &amp;#34;JRR Tolkien&amp;#34;); Console.WriteLine(book2.title); } } </description>
    </item>
    
    <item>
      <title>Class Methods</title>
      <link>https://www.mikedane.com/programming-languages/csharp/class-methods/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:48 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/class-methods/</guid>
      <description> Code Copypublic class Book{ public string title; public string author; public void ReadBook(){ Console.WriteLine($&amp;#34;Reading {this.title} by {this.author}&amp;#34;); } } </description>
    </item>
    
    <item>
      <title>Getters And Setters</title>
      <link>https://www.mikedane.com/programming-languages/csharp/getters-and-setters/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:48 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/getters-and-setters/</guid>
      <description> Code Copypublic class Movie{ private String title; private String rating; public Movie(String title, String rating){ this.title = title; this.setRating(rating); } public String getRating(){ return this.rating; } public void setRating(String rating){ if (rating == &amp;#34;G&amp;#34; || rating == &amp;#34;PG&amp;#34; || rating == &amp;#34;PG-13&amp;#34; || rating == &amp;#34;R&amp;#34; || rating == &amp;#34;NR&amp;#34;){ this.rating = rating; } else { this.rating = &amp;#34;NR&amp;#34;; } } } </description>
    </item>
    
    <item>
      <title>Static Class Attributes</title>
      <link>https://www.mikedane.com/programming-languages/csharp/static-class-attributes/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:48 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/static-class-attributes/</guid>
      <description> Code Copypublic class Song{ public string title; public string artist; public static int songCount = 0; public Song(string title, string artist){ this.title = title; this.artist = artist; songCount&amp;#43;&amp;#43;; } } public class App { public static void Main(string[] args) { Song song1 = new Song(&amp;#34;Holiday&amp;#34;, &amp;#34;Green Day&amp;#34;); Console.WriteLine(Song.songCount) } } </description>
    </item>
    
    <item>
      <title>Static Methods In Classes</title>
      <link>https://www.mikedane.com/programming-languages/csharp/static-methods-in-classes/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:48 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/static-methods-in-classes/</guid>
      <description> Code Copystatic class MyStaticClass{ public static int usefulAttribute = 99; public static void usefulFunction(){ // do something useful } } </description>
    </item>
    
    <item>
      <title>Inheritance</title>
      <link>https://www.mikedane.com/programming-languages/csharp/inheritance/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:48 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/inheritance/</guid>
      <description>Code Copypublic class Chef { public void MakeChicken() { Console.WriteLine(&amp;#34;The chef makes chicken&amp;#34;); } public void MakeSalad() { Console.WriteLine(&amp;#34;The chef makes salad&amp;#34;); } public virtual void MakeSpecialDish() { Console.WriteLine(&amp;#34;The chef makes a special dish&amp;#34;); } } public class ItalianChef : Chef { public void MakePasta() { Console.WriteLine(&amp;#34;The Chef make&amp;#39;s past&amp;#34;); } public override void MakeSpecialDish() { Console.WriteLine(&amp;#34;The chef makes chicken parm&amp;#34;); } } public class App { public static void Main(string[] args) { Chef myChef = new Chef(); myChef.</description>
    </item>
    
    <item>
      <title>In One Video</title>
      <link>https://www.mikedane.com/programming-languages/csharp/in-one-video/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/in-one-video/</guid>
      <description>C# Overview C# (C Sharp) is a general purpose, staticly typed, object oriented programming language that was founded in 2000 by Microsoft as part of their .NET Initiative.
C# was designed to be portable and fast and is tightly coupled with Microsoft&amp;rsquo;s .Net Framework. It was created along side the .Net framework in the late 90s.
C# is one of the most popular programming languages in the world, and can be used to write applications on almost every platform including, Windows, Mac, iOS, Android, and Linux.</description>
    </item>
    
  </channel>
</rss>