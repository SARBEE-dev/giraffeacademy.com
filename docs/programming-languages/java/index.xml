<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Mike Dane</title>
    <link>https://www.mikedane.com/programming-languages/java/</link>
    <description>Recent content in Java on Mike Dane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Oct 2017 11:34:27 -0400</lastBuildDate>
    
	<atom:link href="https://www.mikedane.com/programming-languages/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installing Jdk</title>
      <link>https://www.mikedane.com/programming-languages/java/installing-jdk/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:27 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/installing-jdk/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.mikedane.com/programming-languages/java/hello-world/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:27 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/hello-world/</guid>
      <description> Code CopySystem.out.println(&amp;#34;Hello&amp;#34;); System.out.print(&amp;#34;World&amp;#34;); System.out.println(&amp;#34;!&amp;#34;); </description>
    </item>
    
    <item>
      <title>Drawing A Shape</title>
      <link>https://www.mikedane.com/programming-languages/java/drawing-a-shape/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:28 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/drawing-a-shape/</guid>
      <description>As we begin our programming journey in Java, we&#39;ll start by paying homage to a tradition widely shared among new programmers, which is learning how to print text out onto the screen. As we learn to talk to computers using a programming language like Java, it will help to know how to get them to talk back to us in the form of output, so let&#39;s take a look!
We can achieve this by using a print statement.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.mikedane.com/programming-languages/java/variables/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:28 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/variables/</guid>
      <description>The topic of this lesson, is in fact one of the most fundamental and important topics in all of computer programming, and once you master it, you&#39;ll be well on your way to becoming a Java developer!
The topic I&#39;m talking about is variables! Variables are a Java developer&#39;s bread and butter. They make it really easy to write complex programs with lots and lots of instructions, and keep everything organized and straight.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://www.mikedane.com/programming-languages/java/data-types/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:28 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/data-types/</guid>
      <description>As we write more and more complex programs in Java, we&#39;ll want to work with different types of data (data types). Maybe in one program we&#39;ll print out someone&#39;s favorite movie, in another we&#39;ll keep track of how much money a particular product costs, and maybe in another we&#39;ll ask someone if they&#39;re an organ donor. In everyday life we deal with all different types of data, so why should it be any different for programs?</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.mikedane.com/programming-languages/java/strings/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:28 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/strings/</guid>
      <description>Let&#39;s talk about text, or as it&#39;s known to programmers, strings! In this lesson we&#39;ll take a look at one of Java&#39;s most powerful data types and how you can use them to write awesome programs. As you continue on your journey to becoming a Java developer, one really useful skill you&#39;ll want to pickup along the way is the ability to work with strings in a variety of ways.</description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://www.mikedane.com/programming-languages/java/math/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:28 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/math/</guid>
      <description>Computers and numbers are like bread and butter. In fact the term computer actually used to refer to people who&#39;s job it was to do calculations and &#34;compute&#34; things all day. Needless to say we&#39;ve come a long way since then, and modern computers are capable of performing billions of calculations in the time it takes a normal human to even write a number down. Not to nerd out here too much, but when you get down to it, all computer instructions, all the code that we&#39;ve written in this course, and all the code that&#39;s currently running on your computer, is actually just a collection of complex patterns of 0s &amp;amp; 1s running through your processor.</description>
    </item>
    
    <item>
      <title>Getting User Input</title>
      <link>https://www.mikedane.com/programming-languages/java/getting-user-input/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:28 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/getting-user-input/</guid>
      <description>Throughout this course we&#39;ve taken a look at how we can make the computer give us information. We do this by using print statements. Print statements give us an idea of whats going on in the program at a given time, and are vital to writing good software. But what about the flip side, what happens when we want to give the computer some information? Almost all applications that you interact with on a daily basis will provide ways for you to give them information.</description>
    </item>
    
    <item>
      <title>Creating A Calculator</title>
      <link>https://www.mikedane.com/programming-languages/java/creating-a-calculator/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:28 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/creating-a-calculator/</guid>
      <description> Code Copy// import java.util.Scanner; Scanner keyboardInput = new Scanner(System.in); System.out.print(&amp;#34;Enter num1: &amp;#34;); int num1 = keyboardInput.nextDouble(); // .nextDouble(), .nextInt() System.out.print(&amp;#34;Enter num2: &amp;#34;); int num2 = keyboardInput.nextDouble(); System.out.println(num1 &amp;#43; num2); </description>
    </item>
    
    <item>
      <title>Building A Mad Libs Game</title>
      <link>https://www.mikedane.com/programming-languages/java/building-a-mad-libs-game/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:28 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/building-a-mad-libs-game/</guid>
      <description> Code Copy// import java.util.Scanner; Scanner keyboardInput = new Scanner(System.in); System.out.print(&amp;#34;Enter color: &amp;#34;); String color = keyboardInput.nextLine(); System.out.print(&amp;#34;Enter plural noun: &amp;#34;); String pluralNoun = keyboardInput.nextLine(); System.out.print(&amp;#34;Enter celebrity: &amp;#34;); String celebrity = keyboardInput.nextLine(); System.out.println(&amp;#34;Roses are &amp;#34; &amp;#43; color); System.out.println(pluralNoun &amp;#43; &amp;#34; are blue&amp;#34;); System.out.println(&amp;#34;I love &amp;#34; &amp;#43; celebrity); </description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.mikedane.com/programming-languages/java/arrays/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:28 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/arrays/</guid>
      <description>Up until this point in the course, we&#39;ve been working with different types of data, and generally we&#39;ve been using variables to store that data. Variables are great because we can take pieces of data that would otherwise be difficult to remember and keep track of and store them in a nice, named container. But variables as we&#39;ve seen them so far do have one short coming, and that&#39;s when it comes to storing large amounts of related data.</description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>https://www.mikedane.com/programming-languages/java/functions/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:29 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/functions/</guid>
      <description>In this lesson I wanna talk to you about a really important concept in Java which makes it really easy to keep our programs organized and re-usable. I&#39;m talking of course about Methods!
Maybe you&#39;ve heard the word Method floating around as you&#39;ve begun your programming journey, but today we&#39;re gonna break down exactly what they are and I&#39;ll show you how to use them in Java.
Methods and Organization So far in this course we&#39;ve written a lot of code.</description>
    </item>
    
    <item>
      <title>Return</title>
      <link>https://www.mikedane.com/programming-languages/java/return/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:29 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/return/</guid>
      <description> Code Copypublic static void main(String [] args){ int sum = addNumbers(4, 60); System.out.println(sum); } public static int addNumbers(int num1, int num2){ return num1 &amp;#43; num2; } </description>
    </item>
    
    <item>
      <title>If Statements</title>
      <link>https://www.mikedane.com/programming-languages/java/if-statements/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:29 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/if-statements/</guid>
      <description>Up to this point in the course we&#39;ve written some pretty cool programs! But in this lesson I want to introduce you to a concept that will allow our programs to be even more powerful. If statements are a special structure in Java where we can actually allow our programs to make decisions.
By using an if statement, I could execute certain code when certain conditions are true, and I could execute other code when other conditions are true.</description>
    </item>
    
    <item>
      <title>If Statements (Cont)</title>
      <link>https://www.mikedane.com/programming-languages/java/if-statements-cont/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:29 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/if-statements-cont/</guid>
      <description> Code Copyboolean isStudent = false; boolean isSmart = false; if(isStudent &amp;amp;&amp;amp; isSmart){ System.out.println(&amp;#34;You are a student&amp;#34;); } else if(isStudent &amp;amp;&amp;amp; !isSmart){ System.out.println(&amp;#34;You are not a smart student&amp;#34;); } else { System.out.println(&amp;#34;You are not a student and not smart&amp;#34;); } // &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=, !=, ==, String.equals() if(1 &amp;gt; 3){ System.out.println(&amp;#34;number comparison was true&amp;#34;); } if(&amp;#39;a&amp;#39; &amp;gt; &amp;#39;b&amp;#39;){ System.out.println(&amp;#34;character comparison was true&amp;#34;); } if(&amp;#34;dog&amp;#34;.equals(&amp;#34;cat&amp;#34;)){ System.out.println(&amp;#34;string comparison was true&amp;#34;); } </description>
    </item>
    
    <item>
      <title>Better Calculator</title>
      <link>https://www.mikedane.com/programming-languages/java/better-calculator/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:29 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/better-calculator/</guid>
      <description> Code Copy// import java.util.Scanner; Scanner keyboardInput = new Scanner(System.in); System.out.print(&amp;#34;Enter num1: &amp;#34;); int num1 = keyboardInput.nextDouble(); // .nextDouble(), .nextInt() System.out.print(&amp;#34;Enter Operator: &amp;#34;); String op = keyboardInput.nextLine(); System.out.print(&amp;#34;Enter num2: &amp;#34;); int num2 = keyboardInput.nextDouble(); if(op.equals(&amp;#34;&amp;#43;&amp;#34;)){ System.out.println(num1 &amp;#43; num2); } else if(op.equals(&amp;#34;-&amp;#34;)){ System.out.println(num1 - num2); } else if(op.equals(&amp;#34;/&amp;#34;)){ System.out.println(num1 / num2); } else if(op.equals(&amp;#34;*&amp;#34;)){ System.out.println(num1 * num2); } else { System.out.println(&amp;#34;Invalid Operator&amp;#34;); } System.out.println(num1 &amp;#43; num2); </description>
    </item>
    
    <item>
      <title>Switch Statements</title>
      <link>https://www.mikedane.com/programming-languages/java/switch-statements/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:29 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/switch-statements/</guid>
      <description>Much like if statements, which give your program the ability to make decision, switch statements can be used to infuse a bit of intelligence into any program. In fact, a switch statement is essentially a specialized version of an if statement which would otherwise have an excessive amount of ELSE IF type statements. Let&#39;s take a look at why they&#39;re used. Sometimes, when infusing logic into your programs you&#39;ll run into a situation where given the value of a certain piece of data, you&#39;ll want to do something different.</description>
    </item>
    
    <item>
      <title>While Loops</title>
      <link>https://www.mikedane.com/programming-languages/java/while-loops/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:29 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/while-loops/</guid>
      <description>There&#39;s an on-going gag on the popular show &#34;The Simpsons&#34;, where Bart Simpson is forced to write lines on the chalkboard over and over agian to teach him a lesson. One of my favorites features Bart writing &#34;I will not show off&#34; on the blackboard hundreds of times.
I&#39;ve always liked this gag, and I&#39;m excited to say that I can use it to help explain a programming concept.
In the episode, when Bart wrote all those lines, he was literally writing the same thing 500 times for the whole afternoon.</description>
    </item>
    
    <item>
      <title>Building A Guessing Game</title>
      <link>https://www.mikedane.com/programming-languages/java/building-a-guessing-game/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:29 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/building-a-guessing-game/</guid>
      <description> Code Copy// import java.util.Scanner; Scanner keyboardInput = new Scanner(System.in); String secretWord = &amp;#34;giraffe&amp;#34;; String guess = &amp;#34;&amp;#34;; int guessCount = 0; int guessLimit = 3; boolean outOfGuesses = false; while(!guess.equals(secretWord) &amp;amp;&amp;amp; !outOfGuesses){ if(guessCount &amp;lt; guessLimit){ System.out.print(&amp;#34;Enter a guess: &amp;#34;); guess = keyboardInput.nextLine(); guessCount&amp;#43;&amp;#43;; } else { outOfGuesses = true; } } if(outOfGuesses){ System.out.println(&amp;#34;You Lose!&amp;#34;); } else { System.out.println(&amp;#34;You Win!&amp;#34;); } </description>
    </item>
    
    <item>
      <title>For Loops</title>
      <link>https://www.mikedane.com/programming-languages/java/for-loops/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:29 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/for-loops/</guid>
      <description>The next type of loops were going to discuss are called for loops. For loops are actually just slightly modified versions of while loops which we looked at in a previous lesson. But for loops can make your life as a programmer a lot easier because they simplify a commonly used while loop structure.  The concept is the same a while loop, you’re checking some boolean expression on each iteration of the loop and executing a block of code if it’s true.</description>
    </item>
    
    <item>
      <title>Exponent Function</title>
      <link>https://www.mikedane.com/programming-languages/java/exponent-function/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:29 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/exponent-function/</guid>
      <description> Code Copypublic static int pow(int baseNum, int powNum){ int result = 1; for(int i = 0; i &amp;lt; powNum; i&amp;#43;&amp;#43;){ result = result * baseNum; } return result; } </description>
    </item>
    
    <item>
      <title>2d Arrays &amp; Nested Loops</title>
      <link>https://www.mikedane.com/programming-languages/java/2d-arrays-nested-loops/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:30 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/2d-arrays-nested-loops/</guid>
      <description> Code Copy// int [][] numberGrid = new int[2][3]; int [][] numberGrid = { {1, 2}, {3, 4} }; numberGrid[0][1] = 99; System.out.println(numberGrid[0][0]); System.out.println(numberGrid[0][1]); for(int i = 0; i &amp;lt; numberGrid.length; i&amp;#43;&amp;#43;){ for(int j = 0; j &amp;lt; numberGrid[i].length; j&amp;#43;&amp;#43;){ System.out.println(numberGrid[i][j]); } System.out.println(); } </description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://www.mikedane.com/programming-languages/java/comments/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:30 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/comments/</guid>
      <description>As you continue to sharpen your Java skills and get more and more comfortable writing programs, you&#39;ll eventually become really good at reading code. Just by looking at a line or two you&#39;ll be able to tell what the program is doing, and what&#39;s going to happen. But, in a lot of cases, merely relying on the code to properly explain or document itself can be ineffective, and often times in the course of writing a program you&#39;ll want to mark things down or explain why you&#39;re doing things a certain way.</description>
    </item>
    
    <item>
      <title>Try Catch</title>
      <link>https://www.mikedane.com/programming-languages/java/try-catch/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:30 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/try-catch/</guid>
      <description> Code Copytry{ int division = 10/0; }catch(ArithmeticException e){ System.out.println(e); }catch(Exception e){ // Not best practice to use general Exception } // throws exception throw new ArithmeticException(&amp;#34;can&amp;#39;t add numbers&amp;#34;); </description>
    </item>
    
    <item>
      <title>Classes &amp; Objects</title>
      <link>https://www.mikedane.com/programming-languages/java/classes-objects/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:30 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/classes-objects/</guid>
      <description>One of the best things about Java is it&#39;s ability to allow us to work with and keep track of a bunch of data. In fact data is the driving force behind most programs that you&#39;ll write. Programmers are constantly parsing strings, adding and subtracting numbers, counting things, and passing different pieces of data around. In all major applications, being able to work with data in an organized and structured way is extremely important.</description>
    </item>
    
    <item>
      <title>Classes &amp; Objects (Cont)</title>
      <link>https://www.mikedane.com/programming-languages/java/classes-objects-cont/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:30 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/classes-objects-cont/</guid>
      <description> Code Copyclass Book{ public String title; public String author; } public class App{ public static void main(String [] args){ Book book1 = new Book(); book1.title = &amp;#34;Harry Potter&amp;#34;; book1.author = &amp;#34;JK Rowling&amp;#34;; System.out.println(book1.title); Book book2 = new Book(); book2.title = &amp;#34;Lord of the Rings&amp;#34;; book2.author = &amp;#34;JRR Tolkien&amp;#34;; System.out.println(book2.title); } } </description>
    </item>
    
    <item>
      <title>Constructor Function</title>
      <link>https://www.mikedane.com/programming-languages/java/constructor-function/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:30 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/constructor-function/</guid>
      <description> Code Copyclass Book{ public String title; public String author; public Book(String title, String author){ this.title = title; this.author = author; } } public class App{ public static void main(String [] args){ Book book1 = new Book(&amp;#34;Harry Potter&amp;#34;, &amp;#34;JK Rowling&amp;#34;); System.out.println(book1.title); Book book2 = new Book(&amp;#34;Lord of the Rings&amp;#34;, &amp;#34;JRR Tolkien&amp;#34;); System.out.println(book2.title); } } </description>
    </item>
    
    <item>
      <title>Creating A Quiz</title>
      <link>https://www.mikedane.com/programming-languages/java/creating-a-quiz/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:30 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/creating-a-quiz/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Class Methods</title>
      <link>https://www.mikedane.com/programming-languages/java/class-methods/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:30 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/class-methods/</guid>
      <description> Code Copyclass Book{ public String title; public String author; public void readBook(){ System.out.println(&amp;#34;Reading &amp;#34; &amp;#43; this.title &amp;#43; &amp;#34; by &amp;#34; &amp;#43; this.author); } } </description>
    </item>
    
    <item>
      <title>Getters And Setters</title>
      <link>https://www.mikedane.com/programming-languages/java/getters-and-setters/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:30 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/getters-and-setters/</guid>
      <description> Code Copypublic class Movie{ public String title; private String rating; public int duration; public Movie(String title, String rating, int duration){ this.title = title; this.setRating(rating); this.duration = duration; } public String getRating(){ return this.rating; } public void setRating(String rating){ if(rating.equals(&amp;#34;G&amp;#34;) || rating.equals(&amp;#34;PG&amp;#34;) || rating.equals(&amp;#34;PG-13&amp;#34;) || rating.equals(&amp;#34;R&amp;#34;) || rating.equals(&amp;#34;NR&amp;#34;)){ this.rating = rating; } else { this.rating = &amp;#34;NR&amp;#34;; } } } </description>
    </item>
    
    <item>
      <title>Static Class Attributes</title>
      <link>https://www.mikedane.com/programming-languages/java/static-class-attributes/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:31 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/static-class-attributes/</guid>
      <description> Code Copyclass Song{ public String title; public String artist; public static int songCount = 0; public Song(String title, String artist){ this.title = title; this.artist = artist; songCount&amp;#43;&amp;#43;; } } public class App{ public static void main(String [] args){ Song mySong = new Song(&amp;#34;Holiday&amp;#34;, &amp;#34;Green Day&amp;#34;); System.out.println(Song.songCount); } } </description>
    </item>
    
    <item>
      <title>Static Methods In Classes</title>
      <link>https://www.mikedane.com/programming-languages/java/static-methods-in-classes/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:31 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/static-methods-in-classes/</guid>
      <description> Code Copypublic static class MyStaticClass{ public static int usefulAttribute = 99; public static void usefulFunction(){ // do something useful } } </description>
    </item>
    
    <item>
      <title>Inheritance (Extends)</title>
      <link>https://www.mikedane.com/programming-languages/java/inheritance-extends/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:31 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/inheritance-extends/</guid>
      <description>Code Copyclass Chef{ public void makeChicken(){ System.out.println(&amp;#34;The chef makes chicken&amp;#34;); } public void makeSalad(){ System.out.println(&amp;#34;The chef makes salad&amp;#34;); } public void makeSpecialDish(){ System.out.println(&amp;#34;The chef makes a special dish&amp;#34;); } } class ItalianChef extends Chef{ public void makePasta(){ System.out.println(&amp;#34;The chef makes pasta&amp;#34;); } @Override public void makeSpecialDish(){ System.out.println(&amp;#34;The chef makes chicken parm&amp;#34;); } } public class App{ public static void main(String [] args){ Chef myChef = new Chef(); myChef.makeChicken(); ItalianChef myItalianChef = new ItalianChef(); myItalianChef.</description>
    </item>
    
    <item>
      <title>Inheritance (Implements)</title>
      <link>https://www.mikedane.com/programming-languages/java/inheritance-implements/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:31 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/inheritance-implements/</guid>
      <description> Code Copyinterface Animal{ public void speak(); } class Cat implements Animal{ @Override public void speak(){ System.out.println(&amp;#34;Meow Meow&amp;#34;); } } class Dog implements Animal{ @Override public void speak(){ System.out.println(&amp;#34;Woof Woof&amp;#34;); } } public class App{ public static void main(String [] args){ Animal [] animals = { new Dog(), new Cat() }; for(Animal animal : animals){ animal.speak(); } } } </description>
    </item>
    
    <item>
      <title>Access Modifiers</title>
      <link>https://www.mikedane.com/programming-languages/java/access-modifiers/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:31 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/access-modifiers/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Main Method</title>
      <link>https://www.mikedane.com/programming-languages/java/main-method/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:31 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/main-method/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Packages &amp; Imports</title>
      <link>https://www.mikedane.com/programming-languages/java/packages-imports/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:31 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/packages-imports/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>In One Video</title>
      <link>https://www.mikedane.com/programming-languages/java/in-one-video/</link>
      <pubDate>Sun, 22 Oct 2017 11:34:28 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/java/in-one-video/</guid>
      <description>Java Overview Java is a general purpose, staticly typed, object oriented programming language that was founded in June 1991. The project was initiated by three developers - James Gosling, Mike Sheridan, and Patrick Naughton, but was officially released by Sun Microsystems in 1995.
Java&amp;rsquo;s tagline is &amp;ldquo;Write once, run anywhere&amp;rdquo;, and the language was founded on 5 principles
 It must be &amp;ldquo;simple, object-oriented, and familiar&amp;rdquo;. It must be &amp;ldquo;robust and secure&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>