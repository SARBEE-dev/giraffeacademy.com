<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Mike Dane</title>
    <link>https://www.mikedane.com/programming-languages/ruby/</link>
    <description>Recent content in Ruby on Mike Dane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Nov 2017 00:12:40 -0400</lastBuildDate>
    
	<atom:link href="https://www.mikedane.com/programming-languages/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows Installation</title>
      <link>https://www.mikedane.com/programming-languages/ruby/windows-installation/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:40 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/windows-installation/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Mac Installation</title>
      <link>https://www.mikedane.com/programming-languages/ruby/mac-installation/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:40 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/mac-installation/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Hello World Setup</title>
      <link>https://www.mikedane.com/programming-languages/ruby/hello-world-setup/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:40 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/hello-world-setup/</guid>
      <description> Code Copyputs &amp;#34;Hello&amp;#34; print &amp;#34;World&amp;#34; puts &amp;#34;!&amp;#34; </description>
    </item>
    
    <item>
      <title>Drawing A Pyramid</title>
      <link>https://www.mikedane.com/programming-languages/ruby/drawing-a-pyramid/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:40 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/drawing-a-pyramid/</guid>
      <description>As we begin our programming journey in C&amp;#43;&amp;#43;, we&#39;ll start by paying homage to a tradition widely shared among new programmers, which is learning how to print text out onto the screen. As we learn to talk to computers using a programming language like C&amp;#43;&amp;#43;, it will help to know how to get them to talk back to us in the form of output, so let&#39;s take a look!
We can achieve this by using a print statement.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.mikedane.com/programming-languages/ruby/variables/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:41 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/variables/</guid>
      <description>The topic of this lesson, is in fact one of the most fundamental and important topics in all of computer programming, and once you master it, you&#39;ll be well on your way to becoming a Ruby developer!
The topic I&#39;m talking about is variables! Variables are a Ruby developer&#39;s bread and butter. They make it really easy to write complex programs with lots and lots of instructions, and keep everything organized and straight.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://www.mikedane.com/programming-languages/ruby/data-types/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:41 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/data-types/</guid>
      <description>As we write more and more complex programs in Ruby, we&#39;ll want to work with different types of data (data types). Maybe in one program we&#39;ll print out someone&#39;s favorite movie, in another we&#39;ll keep track of how much money a particular product costs, and maybe in another we&#39;ll ask someone if they&#39;re an organ donor. In everyday life we deal with all different types of data, so why should it be any different for programs?</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.mikedane.com/programming-languages/ruby/strings/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:41 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/strings/</guid>
      <description>Let&#39;s talk about text, or as it&#39;s known to programmers, strings! In this lesson we&#39;ll take a look at one of Ruby&#39;s most powerful data types and how you can use them to write awesome programs. As you continue on your journey to becoming a Ruby developer, one really useful skill you&#39;ll want to pickup along the way is the ability to work with strings in a variety of ways.</description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://www.mikedane.com/programming-languages/ruby/math/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:41 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/math/</guid>
      <description>Computers and numbers are like bread and butter. In fact the term computer actually used to refer to people who&#39;s job it was to do calculations and &#34;compute&#34; things all day. Needless to say we&#39;ve come a long way since then, and modern computers are capable of performing billions of calculations in the time it takes a normal human to even write a number down. Not to nerd out here too much, but when you get down to it, all computer instructions, all the code that we&#39;ve written in this course, and all the code that&#39;s currently running on your computer, is actually just a collection of complex patterns of 0s &amp;amp; 1s running through your processor.</description>
    </item>
    
    <item>
      <title>Getting User Input</title>
      <link>https://www.mikedane.com/programming-languages/ruby/getting-user-input/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:41 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/getting-user-input/</guid>
      <description>Throughout this course we&#39;ve taken a look at how we can make the computer give us information. We do this by using print statements. Print statements give us an idea of whats going on in the program at a given time, and are vital to writing good software. But what about the flip side, what happens when we want to give the computer some information? Almost all applications that you interact with on a daily basis will provide ways for you to give them information.</description>
    </item>
    
    <item>
      <title>Creating A Calculator</title>
      <link>https://www.mikedane.com/programming-languages/ruby/creating-a-calculator/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:42 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/creating-a-calculator/</guid>
      <description> Code Copyputs &amp;#34;Enter first num: &amp;#34; num1 = gets.chomp puts &amp;#34;enter second num: &amp;#34; num2 = gets.chomp puts num1.to_f &amp;#43; num2.to_f </description>
    </item>
    
    <item>
      <title>Building A Mad Libs Game</title>
      <link>https://www.mikedane.com/programming-languages/ruby/building-a-mad-libs-game/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:42 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/building-a-mad-libs-game/</guid>
      <description> Code Copyputs &amp;#34;Enter a color: &amp;#34; color = gets.chomp puts &amp;#34;Enter a plural noun: &amp;#34; plural_noun = gets.chomp puts &amp;#34;Enter a celebrity: &amp;#34; celebrity = gets.chomp puts &amp;#34;Roses are #{color}&amp;#34; puts &amp;#34;#{plural_noun} are blue&amp;#34; puts &amp;#34;I love #{celebrity}&amp;#34; </description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.mikedane.com/programming-languages/ruby/arrays/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:42 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/arrays/</guid>
      <description>Up until this point in the course, we&#39;ve been working with different types of data, and generally we&#39;ve been using variables to store that data. Variables are great because we can take pieces of data that would otherwise be difficult to remember and keep track of and store them in a nice, named container. But variables as we&#39;ve seen them so far do have one short coming, and that&#39;s when it comes to storing large amounts of related data.</description>
    </item>
    
    <item>
      <title>Hashes</title>
      <link>https://www.mikedane.com/programming-languages/ruby/hashes/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:42 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/hashes/</guid>
      <description> Code Copytest_grades = { &amp;#34;Andy&amp;#34; =&amp;gt; &amp;#34;B&amp;#43;&amp;#34;, :Stanley =&amp;gt; &amp;#34;C&amp;#34;, &amp;#34;Ryan&amp;#34; =&amp;gt; &amp;#34;A&amp;#34;, 3 =&amp;gt; 95.2 } test_grades[&amp;#34;Andy&amp;#34;] = &amp;#34;B-&amp;#34; puts test_grades[&amp;#34;Andy&amp;#34;] puts test_grades[:Stanley] puts test_grades[3] </description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>https://www.mikedane.com/programming-languages/ruby/methods/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:42 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/methods/</guid>
      <description>In this lesson I wanna talk to you about a really important concept in Ruby which makes it really easy to keep our programs organized and re-usable. I&#39;m talking of course about Methods!
Maybe you&#39;ve heard the word Method floating around as you&#39;ve begun your programming journey, but today we&#39;re gonna break down exactly what they are and I&#39;ll show you how to use them in Ruby.
Methods and Organization So far in this course we&#39;ve written a lot of code.</description>
    </item>
    
    <item>
      <title>Return</title>
      <link>https://www.mikedane.com/programming-languages/ruby/return/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:42 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/return/</guid>
      <description> Code Copydef add_numbers(num1, num2=99) return num1 &amp;#43; num2 end sum = add_numbers(4, 3) puts sum </description>
    </item>
    
    <item>
      <title>If Statements</title>
      <link>https://www.mikedane.com/programming-languages/ruby/if-statements/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:43 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/if-statements/</guid>
      <description>Up to this point in the course we&#39;ve written some pretty cool programs! But in this lesson I want to introduce you to a concept that will allow our programs to be even more powerful. If statements are a special structure in Python where we can actually allow our programs to make decisions.
By using an if statement, I could execute certain code when certain conditions are true, and I could execute other code when other conditions are true.</description>
    </item>
    
    <item>
      <title>If Statements Cont</title>
      <link>https://www.mikedane.com/programming-languages/ruby/if-statements-cont/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:43 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/if-statements-cont/</guid>
      <description> Code Copyis_student = false is_smart = false if is_student and is_smart puts &amp;#34;You are a student&amp;#34; elsif is_student and !is_smart puts &amp;#34;You are not a smart student&amp;#34; else puts &amp;#34;You are not a student and not smart&amp;#34; end # &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=, !=, == if 1 &amp;gt; 3 puts &amp;#34;number comparison was true&amp;#34; end if &amp;#34;a&amp;#34; &amp;gt; &amp;#34;b&amp;#34; puts &amp;#34;string comparison was true&amp;#34; end </description>
    </item>
    
    <item>
      <title>Calculator</title>
      <link>https://www.mikedane.com/programming-languages/ruby/calculator/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:43 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/calculator/</guid>
      <description> Code Copyputs &amp;#34;num1: &amp;#34; num1 = gets.chomp.to_f puts &amp;#34;Enter Operator: &amp;#34; op = gets.chomp puts &amp;#34;num2: &amp;#34; num2 = gets.chomp.to_f if op == &amp;#34;&amp;#43;&amp;#34; puts num1 &amp;#43; num2 elsif op == &amp;#34;-&amp;#34; puts num1 - num2 elsif op == &amp;#34;/&amp;#34; puts num1 / num2 elsif op == &amp;#34;*&amp;#34; puts num1 * num2 else puts &amp;#34;Invalid Operator&amp;#34; end </description>
    </item>
    
    <item>
      <title>Case Expressions</title>
      <link>https://www.mikedane.com/programming-languages/ruby/case-expressions/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:43 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/case-expressions/</guid>
      <description>Much like if statements, which give your program the ability to make decision, switch statements can be used to infuse a bit of intelligence into any program. In fact, a switch statement is essentially a specialized version of an if statement which would otherwise have an excessive amount of ELSE IF type statements. Let&#39;s take a look at why they&#39;re used. Sometimes, when infusing logic into your programs you&#39;ll run into a situation where given the value of a certain piece of data, you&#39;ll want to do something different.</description>
    </item>
    
    <item>
      <title>While Loops</title>
      <link>https://www.mikedane.com/programming-languages/ruby/while-loops/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:43 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/while-loops/</guid>
      <description>There&#39;s an on-going gag on the popular show &#34;The Simpsons&#34;, where Bart Simpson is forced to write lines on the chalkboard over and over agian to teach him a lesson. One of my favorites features Bart writing &#34;I will not show off&#34; on the blackboard hundreds of times.
I&#39;ve always liked this gag, and I&#39;m excited to say that I can use it to help explain a programming concept.
In the episode, when Bart wrote all those lines, he was literally writing the same thing 500 times for the whole afternoon.</description>
    </item>
    
    <item>
      <title>Building A Guessing Game</title>
      <link>https://www.mikedane.com/programming-languages/ruby/building-a-guessing-game/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:43 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/building-a-guessing-game/</guid>
      <description> Code Copysecret_word = &amp;#34;giraffe&amp;#34; guess = &amp;#34;&amp;#34; guess_count = 0 guess_limit = 3 out_of_guesses = false while guess != secret_word and !out_of_guesses: if guess_count &amp;lt; guess_limit puts &amp;#34;Enter guess: &amp;#34; guess = gets.chomp() guess_count &amp;#43;= 1 else out_of_guesses = true end end if out_of_guesses puts &amp;#34;You Lose!&amp;#34; else puts &amp;#34;You Win!&amp;#34; end </description>
    </item>
    
    <item>
      <title>For Loops</title>
      <link>https://www.mikedane.com/programming-languages/ruby/for-loops/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/for-loops/</guid>
      <description> Code Copyfor index in 0..5 puts index end 5.times do |index| puts index end lucky_nums = [4, 8, 15, 16, 23, 42] for lucky_num in lucky_nums puts lucky_num end lucky_nums.each do |lucky_num| puts lucky_num end </description>
    </item>
    
    <item>
      <title>Building An Exponent Function</title>
      <link>https://www.mikedane.com/programming-languages/ruby/building-an-exponent-function/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/building-an-exponent-function/</guid>
      <description> Code Copydef pow(base_num, pow_num) result = 1 pow_num.times do |index| result = result * base_num end return result end </description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://www.mikedane.com/programming-languages/ruby/comments/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/comments/</guid>
      <description>As you continue to sharpen your Ruby skills and get more and more comfortable writing programs, you&#39;ll eventually become really good at reading code. Just by looking at a line or two you&#39;ll be able to tell what the program is doing, and what&#39;s going to happen. But, in a lot of cases, merely relying on the code to properly explain or document itself can be ineffective, and often times in the course of writing a program you&#39;ll want to mark things down or explain why you&#39;re doing things a certain way.</description>
    </item>
    
    <item>
      <title>Reading Files</title>
      <link>https://www.mikedane.com/programming-languages/ruby/reading-files/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/reading-files/</guid>
      <description> Code CopyFile.open(&amp;#34;employees.txt&amp;#34;, &amp;#34;r&amp;#34;) do |file| for line in file.readlines() puts line end end # --------------- # or # --------------- file = File.open(&amp;#34;employees.txt&amp;#34;, &amp;#34;r&amp;#34;) puts file.read file.close() </description>
    </item>
    
    <item>
      <title>Writing Files</title>
      <link>https://www.mikedane.com/programming-languages/ruby/writing-files/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/writing-files/</guid>
      <description> Code CopyFile.open(&amp;#34;employees.txt&amp;#34;, &amp;#34;r&amp;#43;&amp;#34;) do |file| file.write(&amp;#34;writing some text&amp;#34;) end </description>
    </item>
    
    <item>
      <title>Handling Errors</title>
      <link>https://www.mikedane.com/programming-languages/ruby/handling-errors/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/handling-errors/</guid>
      <description> Code Copybegin # puts bad_variable num = 10/0 rescue ZeroDivisionError puts &amp;#34;Error&amp;#34; rescue puts &amp;#34;All other errors&amp;#34; end # or raise an exception raise &amp;#34;Made Up Exception&amp;#34; </description>
    </item>
    
    <item>
      <title>Classes &amp; Objects</title>
      <link>https://www.mikedane.com/programming-languages/ruby/classes-objects/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:45 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/classes-objects/</guid>
      <description>One of the best things about Ruby is it&#39;s ability to allow us to work with and keep track of a bunch of data. In fact data is the driving force behind most programs that you&#39;ll write. Programmers are constantly parsing strings, adding and subtracting numbers, counting things, and passing different pieces of data around. In all major applications, being able to work with data in an organized and structured way is extremely important.</description>
    </item>
    
    <item>
      <title>Initialize Method</title>
      <link>https://www.mikedane.com/programming-languages/ruby/initialize-method/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:45 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/initialize-method/</guid>
      <description> Code Copyclass Book attr_accessor :title, :author def initialize(title, author) @title = title @author = author end end book1 = Book.new(&amp;#34;Harry Potter&amp;#34;, &amp;#34;JK Rowling&amp;#34;) # book1.title = &amp;#34;Half-Blood Prince&amp;#34; puts book1.title </description>
    </item>
    
    <item>
      <title>Object Methods</title>
      <link>https://www.mikedane.com/programming-languages/ruby/object-methods/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:45 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/object-methods/</guid>
      <description> Code Copyclass Student attr_accessor :name, :major, :gpa def initialize(name, major, gpa) @name = title @major = author @gpa = gpa end def has_honors() if self.gpa &amp;gt;= 3.5 return true end return false end end </description>
    </item>
    
    <item>
      <title>Creating A Quiz</title>
      <link>https://www.mikedane.com/programming-languages/ruby/creating-a-quiz/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:45 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/creating-a-quiz/</guid>
      <description>Code Copyclass Question attr_accessor :prompt, :answer def initialize(prompt, answer) @prompt = prompt @answer = answer end end p1 = &amp;#34;What color are apples?\n(a) Red/Green\n(b)Orange&amp;#34; p2 = &amp;#34;What color are bananas?\n(a) Red/Green\n(b)Yellow&amp;#34; questions = [ Question.new(p1, &amp;#34;a&amp;#34;), Question.new(p2, &amp;#34;b&amp;#34;) ] def run_quiz(questions) answer = &amp;#34;&amp;#34; score = 0 for question in questions puts question.prompt answer = gets.chomp() if answer == question.answer score &amp;#43;= 1 end end puts &amp;#34;you got #{score} out of #{questions.</description>
    </item>
    
    <item>
      <title>Inheritance</title>
      <link>https://www.mikedane.com/programming-languages/ruby/inheritance/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:45 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/inheritance/</guid>
      <description> Code Copyclass Chef def make_chicken() puts &amp;#34;The chef makes chicken&amp;#34; end def make_salad() puts &amp;#34;The chef makes salad&amp;#34; end def make_special_dish() puts &amp;#34;The chef makes a special dish&amp;#34; end end class ItalianChef &amp;lt; Chef def make_pasta() puts &amp;#34;The chef makes pasta&amp;#34; end def make_special_dish() puts &amp;#34;The chef makes chicken parm&amp;#34; end end my_chef = Chef.new() my_chef.make_chicken() my_italian_chef = ItalianChef.new() my_italian_chef.make_chicken() </description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://www.mikedane.com/programming-languages/ruby/modules/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:46 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/modules/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Interactive Ruby</title>
      <link>https://www.mikedane.com/programming-languages/ruby/interactive-ruby/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:46 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/interactive-ruby/</guid>
      <description></description>
    </item>
    
    <item>
      <title>In One Video</title>
      <link>https://www.mikedane.com/programming-languages/ruby/in-one-video/</link>
      <pubDate>Wed, 01 Nov 2017 00:12:41 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/ruby/in-one-video/</guid>
      <description>Ruby Overview Ruby is a general purpose, dynamically typed and reflective, object oriented programming language that was created in the 1990s by Yukihiro Matsumoto.
The original intent when creating ruby was to create a true Object Oriented scripting language. Which at the time, in Matsumoto&amp;rsquo;s optinion, didn&amp;rsquo;t exist. Ruby was designed to be simple at it&amp;rsquo;s core, but with an object system that was fully integreated into the language, and not tacked on as a glorified addon.</description>
    </item>
    
  </channel>
</rss>