<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on Mike Dane</title>
    <link>https://www.mikedane.com/web-development/php/</link>
    <description>Recent content in PHP on Mike Dane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Nov 2017 17:52:36 -0500</lastBuildDate>
    
	<atom:link href="https://www.mikedane.com/web-development/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows Installation</title>
      <link>https://www.mikedane.com/web-development/php/windows-installation/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:36 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/windows-installation/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Choosing A Text Editor</title>
      <link>https://www.mikedane.com/web-development/php/choosing-a-text-editor/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:36 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/choosing-a-text-editor/</guid>
      <description> Code Copy </description>
    </item>
    
    <item>
      <title>Hello World / Setup</title>
      <link>https://www.mikedane.com/web-development/php/hello-world-setup/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:36 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/hello-world-setup/</guid>
      <description> Code Copyecho &amp;#34;Hello World&amp;#34;; </description>
    </item>
    
    <item>
      <title>Writing Html</title>
      <link>https://www.mikedane.com/web-development/php/writing-html/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:36 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/writing-html/</guid>
      <description>As we begin our programming journey in Python, we&#39;ll start by paying homage to a tradition widely shared among new programmers, which is learning how to print text out onto the screen. As we learn to talk to computers using a programming language like Python, it will help to know how to get them to talk back to us in the form of output, so let&#39;s take a look!</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.mikedane.com/web-development/php/variables/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:36 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/variables/</guid>
      <description>The topic of this lesson, is in fact one of the most fundamental and important topics in all of computer programming, and once you master it, you&#39;ll be well on your way to becoming a PHP developer!
The topic I&#39;m talking about is variables! Variables are a PHP developer&#39;s bread and butter. They make it really easy to write complex programs with lots and lots of instructions, and keep everything organized and straight.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://www.mikedane.com/web-development/php/data-types/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:36 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/data-types/</guid>
      <description>As we write more and more complex programs in PHP, we&#39;ll want to work with different types of data (data types). Maybe in one program we&#39;ll print out someone&#39;s favorite movie, in another we&#39;ll keep track of how much money a particular product costs, and maybe in another we&#39;ll ask someone if they&#39;re an organ donor. In everyday life we deal with all different types of data, so why should it be any different for programs?</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.mikedane.com/web-development/php/strings/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/strings/</guid>
      <description>Let&#39;s talk about text, or as it&#39;s known to programmers, strings! In this lesson we&#39;ll take a look at one of PHP&#39;s most powerful data types and how you can use them to write awesome programs. As you continue on your journey to becoming a PHP developer, one really useful skill you&#39;ll want to pickup along the way is the ability to work with strings in a variety of ways.</description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://www.mikedane.com/web-development/php/math/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/math/</guid>
      <description>Computers and numbers are like bread and butter. In fact the term computer actually used to refer to people who&#39;s job it was to do calculations and &#34;compute&#34; things all day. Needless to say we&#39;ve come a long way since then, and modern computers are capable of performing billions of calculations in the time it takes a normal human to even write a number down. Not to nerd out here too much, but when you get down to it, all computer instructions, all the code that we&#39;ve written in this course, and all the code that&#39;s currently running on your computer, is actually just a collection of complex patterns of 0s &amp;amp; 1s running through your processor.</description>
    </item>
    
    <item>
      <title>Getting Input From Users</title>
      <link>https://www.mikedane.com/web-development/php/getting-input-from-users/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/getting-input-from-users/</guid>
      <description>Throughout this course we&#39;ve taken a look at how we can make the computer give us information. We do this by using print statements. Print statements give us an idea of whats going on in the program at a given time, and are vital to writing good software. But what about the flip side, what happens when we want to give the computer some information? Almost all applications that you interact with on a daily basis will provide ways for you to give them information.</description>
    </item>
    
    <item>
      <title>Creating A Calculator</title>
      <link>https://www.mikedane.com/web-development/php/creating-a-calculator/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/creating-a-calculator/</guid>
      <description> Code site.phpCopy&amp;lt;form action=&amp;#34;site.php&amp;#34; method=&amp;#34;GET&amp;#34;&amp;gt; Num1: &amp;lt;input type=&amp;#34;number&amp;#34; name=&amp;#34;num1&amp;#34;&amp;gt; Num2: &amp;lt;input type=&amp;#34;number&amp;#34; name=&amp;#34;num2&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;?php $num1 = $_GET[&amp;#34;num1&amp;#34;]; $num2 = $_GET[&amp;#34;num2&amp;#34;]; echo $num1 &amp;#43; $num2; ?&amp;gt; </description>
    </item>
    
    <item>
      <title>Building A Mad Libs Game</title>
      <link>https://www.mikedane.com/web-development/php/building-a-mad-libs-game/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/building-a-mad-libs-game/</guid>
      <description> Code site.phpCopy&amp;lt;form action=&amp;#34;site.php&amp;#34; method=&amp;#34;GET&amp;#34;&amp;gt; Color: &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;color&amp;#34;&amp;gt; Plural Noun: &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;pluralNoun&amp;#34;&amp;gt; Celebrity: &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;celebrity&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;?php $color = $_GET[&amp;#34;color&amp;#34;]; $pluralNoun = $_GET[&amp;#34;pluralNoun&amp;#34;]; $celebrity = $_GET[&amp;#34;celebrity&amp;#34;]; echo &amp;#34;Roses are $color&amp;#34;; echo &amp;#34;$pluralNoun are blue&amp;#34;; echo &amp;#34;I love $celebrity&amp;#34;; ?&amp;gt; </description>
    </item>
    
    <item>
      <title>Url Parameters</title>
      <link>https://www.mikedane.com/web-development/php/url-parameters/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/url-parameters/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Post Vs Get</title>
      <link>https://www.mikedane.com/web-development/php/post-vs-get/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/post-vs-get/</guid>
      <description> Code site.phpCopy&amp;lt;form action=&amp;#34;App.php&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt; Password: &amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;?php echo $_POST[&amp;#34;password&amp;#34;]; ?&amp;gt; </description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.mikedane.com/web-development/php/arrays/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/arrays/</guid>
      <description>Up until this point in the course, we&#39;ve been working with different types of data, and generally we&#39;ve been using variables to store that data. Variables are great because we can take pieces of data that would otherwise be difficult to remember and keep track of and store them in a nice, named container. But variables as we&#39;ve seen them so far do have one short coming, and that&#39;s when it comes to storing large amounts of related data.</description>
    </item>
    
    <item>
      <title>Using Checkboxes</title>
      <link>https://www.mikedane.com/web-development/php/using-checkboxes/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/using-checkboxes/</guid>
      <description> Code site.phpCopy&amp;lt;form action=&amp;#34;site.php&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt; Apples: &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;fruits[]&amp;#34; value=&amp;#34;apples&amp;#34;&amp;gt; Oranges: &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;fruits[]&amp;#34; value=&amp;#34;oranges&amp;#34;&amp;gt; Pears: &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;fruits[]&amp;#34; value=&amp;#34;pears&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;?php $fruits = _POST[&amp;#34;fruits&amp;#34;]; echo $fruits[1]; ?&amp;gt; </description>
    </item>
    
    <item>
      <title>Associative Arrays</title>
      <link>https://www.mikedane.com/web-development/php/associative-arrays/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/associative-arrays/</guid>
      <description> Code Copytest_grades = { &amp;#34;Andy&amp;#34; =&amp;gt; &amp;#34;B&amp;#43;&amp;#34;, &amp;#34;Stanley&amp;#34; =&amp;gt; &amp;#34;C&amp;#34;, &amp;#34;Ryan&amp;#34; =&amp;gt; &amp;#34;A&amp;#34;, 3 =&amp;gt; 95.2 } echo test_grades[&amp;#34;Andy&amp;#34;].&amp;#34;&amp;lt;br&amp;gt;&amp;#34;; echo test_grades[&amp;#34;Ryan&amp;#34;].&amp;#34;&amp;lt;br&amp;gt;&amp;#34;; echo test_grades[3].&amp;#34;&amp;lt;br&amp;gt;&amp;#34;; </description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.mikedane.com/web-development/php/functions/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/functions/</guid>
      <description>In this lesson I wanna talk to you about a really important concept in PHP which makes it really easy to keep our programs organized and re-usable. I&#39;m talking of course about Functions!
Maybe you&#39;ve heard the word Function floating around as you&#39;ve begun your programming journey, but today we&#39;re gonna break down exactly what they are and I&#39;ll show you how to use them in PHP.
Functions and Organization So far in this course we&#39;ve written a lot of code.</description>
    </item>
    
    <item>
      <title>Return Statements</title>
      <link>https://www.mikedane.com/web-development/php/return-statements/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/return-statements/</guid>
      <description> Code Copyfunction addNumbers($num1, $num2=99){ return $num1 &amp;#43; $num2; } $sum = addNumbers(4, 3); echo $sum; </description>
    </item>
    
    <item>
      <title>If Statements</title>
      <link>https://www.mikedane.com/web-development/php/if-statements/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/if-statements/</guid>
      <description>Up to this point in the course we&#39;ve written some pretty cool programs! But in this lesson I want to introduce you to a concept that will allow our programs to be even more powerful. If statements are a special structure in PHP where we can actually allow our programs to make decisions.
By using an if statement, I could execute certain code when certain conditions are true, and I could execute other code when other conditions are true.</description>
    </item>
    
    <item>
      <title>If Statements (Continued)</title>
      <link>https://www.mikedane.com/web-development/php/if-statements-continued/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/if-statements-continued/</guid>
      <description> Code Copy$isStudent = false; $isSmart = false; if($isStudent &amp;amp;&amp;amp; $isSmart){ echo &amp;#34;You are a student&amp;#34;; } elseif($isStudent &amp;amp;&amp;amp; !$isSmart){ echo &amp;#34;You are not a smart student&amp;#34;; } else { echo &amp;#34;You are not a student and not smart&amp;#34;; } echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;; // &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=, !=, == if(1 &amp;gt; 3){ echo &amp;#34;number comparison was true&amp;#34;; } echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;; if(&amp;#34;dog&amp;#34; == &amp;#34;cat&amp;#34;){ echo &amp;#34;string comparison was true&amp;#34;; } </description>
    </item>
    
    <item>
      <title>Building A Better Calculator</title>
      <link>https://www.mikedane.com/web-development/php/building-a-better-calculator/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/building-a-better-calculator/</guid>
      <description> Code site.phpCopy&amp;lt;form action=&amp;#34;site.php&amp;#34; method=&amp;#34;GET&amp;#34;&amp;gt; Num1: &amp;lt;input type=&amp;#34;number&amp;#34; name=&amp;#34;num1&amp;#34;&amp;gt; Operator: &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;op&amp;#34;&amp;gt; Num2: &amp;lt;input type=&amp;#34;number&amp;#34; name=&amp;#34;num2&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;?php $num1 = $_GET[&amp;#34;num1&amp;#34;]; $num2 = $_GET[&amp;#34;num2&amp;#34;]; $op = $_GET[&amp;#34;op&amp;#34;]; if($op == &amp;#34;&amp;#43;&amp;#34;){ echo $num1 &amp;#43; $num2; } elseif($op == &amp;#34;-&amp;#34;){ echo $num1 - $num2; } elseif($op == &amp;#34;/&amp;#34;){ echo $num1 / $num2; } elseif($op == &amp;#34;*&amp;#34;){ echo $num1 * $num2; } else { echo &amp;#34;Invalid Operator&amp;#34;; } ?&amp;gt; </description>
    </item>
    
    <item>
      <title>Switch Statements</title>
      <link>https://www.mikedane.com/web-development/php/switch-statements/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/switch-statements/</guid>
      <description>Much like if statements, which give your program the ability to make decision, switch statements can be used to infuse a bit of intelligence into any program. In fact, a switch statement is essentially a specialized version of an if statement which would otherwise have an excessive amount of ELSE IF type statements. Let&#39;s take a look at why they&#39;re used. Sometimes, when infusing logic into your programs you&#39;ll run into a situation where given the value of a certain piece of data, you&#39;ll want to do something different.</description>
    </item>
    
    <item>
      <title>While Loops</title>
      <link>https://www.mikedane.com/web-development/php/while-loops/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/while-loops/</guid>
      <description>There&#39;s an on-going gag on the popular show &#34;The Simpsons&#34;, where Bart Simpson is forced to write lines on the chalkboard over and over agian to teach him a lesson. One of my favorites features Bart writing &#34;I will not show off&#34; on the blackboard hundreds of times.
I&#39;ve always liked this gag, and I&#39;m excited to say that I can use it to help explain a programming concept.
In the episode, when Bart wrote all those lines, he was literally writing the same thing 500 times for the whole afternoon.</description>
    </item>
    
    <item>
      <title>For Loops</title>
      <link>https://www.mikedane.com/web-development/php/for-loops/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/for-loops/</guid>
      <description>The next type of loops were going to discuss are called for loops. For loops are actually just slightly modified versions of while loops which we looked at in a previous lesson. But for loops can make your life as a programmer a lot easier because they simplify a commonly used while loop structure.  The concept is the same a while loop, you’re checking some boolean expression on each iteration of the loop and executing a block of code if it’s true.</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://www.mikedane.com/web-development/php/comments/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/comments/</guid>
      <description>As you continue to sharpen your PHP skills and get more and more comfortable writing programs, you&#39;ll eventually become really good at reading code. Just by looking at a line or two you&#39;ll be able to tell what the program is doing, and what&#39;s going to happen. But, in a lot of cases, merely relying on the code to properly explain or document itself can be ineffective, and often times in the course of writing a program you&#39;ll want to mark things down or explain why you&#39;re doing things a certain way.</description>
    </item>
    
    <item>
      <title>Including Html</title>
      <link>https://www.mikedane.com/web-development/php/including-html/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/including-html/</guid>
      <description> Code Copyinclude &amp;#34;filename.ext&amp;#34; </description>
    </item>
    
    <item>
      <title>Including Php</title>
      <link>https://www.mikedane.com/web-development/php/including-php/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/including-php/</guid>
      <description> Code Copyinclude &amp;#34;filename.php&amp;#34; </description>
    </item>
    
    <item>
      <title>Classes And Objects</title>
      <link>https://www.mikedane.com/web-development/php/classes-and-objects/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:38 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/classes-and-objects/</guid>
      <description> Code Copyclass Book{ var $title; public $author; }; $book1 = new Book; $book1-&amp;gt;title = &amp;#34;Harry Potter&amp;#34;; $book1-&amp;gt;author = &amp;#34;JK Rowling&amp;#34;; echo $book1-&amp;gt;title.&amp;#34;&amp;lt;br&amp;gt;&amp;#34;; </description>
    </item>
    
    <item>
      <title>Constructors</title>
      <link>https://www.mikedane.com/web-development/php/constructors/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:39 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/constructors/</guid>
      <description> Code Copyclass Book{ var $title; public $author; function __construct($title, $author){ $this-&amp;gt;title = $title; $this-&amp;gt;author = $author; } }; $book1 = new Book(&amp;#34;Harry Potter&amp;#34;, &amp;#34;JK Rowling&amp;#34;); // $book1-&amp;gt;title = &amp;#34;Half-Blood Prince&amp;#34;; echo $book1-&amp;gt;title.&amp;#34;&amp;lt;br&amp;gt;&amp;#34;; </description>
    </item>
    
    <item>
      <title>Object Methods</title>
      <link>https://www.mikedane.com/web-development/php/object-methods/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:39 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/object-methods/</guid>
      <description> Code Copyclass Student{ public $name; public $gpa; function __construct($name, $gpa){ $this-&amp;gt;name = $name; $this-&amp;gt;gpa = $gpa; } function hasHonors(){ if($this-&amp;gt;gpa &amp;gt;= 3.5){ return true; } return false; } }; </description>
    </item>
    
    <item>
      <title>Getters And Setters</title>
      <link>https://www.mikedane.com/web-development/php/getters-and-setters/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:39 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/getters-and-setters/</guid>
      <description> Code Copyclass Movie{ public $title; private $rating; function __construct($title, $rating){ $this-&amp;gt;title = $title; $this-&amp;gt;setRating($rating); } function getRating(){ return $this-&amp;gt;rating; } function setRating($rating){ if($rating == &amp;#34;G&amp;#34; || $rating == &amp;#34;PG&amp;#34; || $rating == &amp;#34;PG-13&amp;#34; || $rating == &amp;#34;R&amp;#34; || $rating == &amp;#34;NR&amp;#34;){ $this-&amp;gt;rating = $rating; } else { $this-&amp;gt;rating = &amp;#34;NR&amp;#34;; } } }; </description>
    </item>
    
    <item>
      <title>Inheritance</title>
      <link>https://www.mikedane.com/web-development/php/inheritance/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:39 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/inheritance/</guid>
      <description> Code Copyclass Chef{ function makeChicken(){ echo &amp;#34;The chef makes chicken&amp;#34;; } function makeSalad(){ echo &amp;#34;The chef makes salad&amp;#34;; } function makeSpecialDish(){ echo &amp;#34;The chef makes bbq ribs&amp;#34;; } }; class ItalianChef extends Chef{ function makePasta(){ echo &amp;#34;The chef makes pasta&amp;#34;; } function makeSpecialDish(){ echo &amp;#34;The chef makes chicken parm&amp;#34;; } }; $chef = new Chef(); $chef-&amp;gt;makeChicken(); echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;; $italianChef = new ItalianChef(); $italianChef-&amp;gt;makeChicken(); </description>
    </item>
    
    <item>
      <title>In One Video</title>
      <link>https://www.mikedane.com/web-development/php/in-one-video/</link>
      <pubDate>Wed, 15 Nov 2017 17:52:37 -0500</pubDate>
      
      <guid>https://www.mikedane.com/web-development/php/in-one-video/</guid>
      <description>PHP Overview Php is a server side scripting language, designed primarily for use on web servers, but also used as a general purpose programming language. Php was created in the 1990s by Rasmus Lerdorf, and is fully Object Oriented.
The most common use case for PHP is in web development. Because PHP can be written along side HTML, and also because it integrates so well with HTML and other web technologies, you&amp;rsquo;ll often find it running on a web server.</description>
    </item>
    
  </channel>
</rss>